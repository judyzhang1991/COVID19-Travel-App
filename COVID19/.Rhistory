source_country_long = NA,
dest_country_lat = NA,
dest_country_long = NA
)
for(i in 1 : nrow(direct_routes)){
source_country_geo = assign_country_geo(direct_routes, direct_routes$source_country[i])
direct_routes$source_country_lat[i] = source_country_geo[1]
direct_routes$source_country_long[i] = source_country_geo[2]
dest_country_geo = assign_country_geo(direct_routes, direct_routes$dest_country[i])
direct_routes$dest_country_lat[i] = dest_country_geo[1]
direct_routes$dest_country_long[i] = dest_country_geo[2]
}
# Create a dataframe of distinct countries and its calculated geo code
countries_geo <- data.frame(
country = unique(c(direct_routes$source_country, direct_routes$dest_country))
) %>%
mutate(
country_lat = NA,
country_long = NA
)
for(i in 1:nrow(countries_geo)){
countries_geo$country_lat[i] = assign_country_geo(direct_routes, countries_geo$country[i])[1]
countries_geo$country_long[i] = assign_country_geo(direct_routes, countries_geo$country[i])[2]
}
rownames(countries_geo) <- countries_geo$country
country_name <- "Aruba"
direct_routes <- direct_routes %>% filter(source_country == country_name)
curve_color = "#16a085"
dot_color = "#7303fc"
date_str <- "03-15-2020"
# Update direct routes data with travel policy
direct_routes <- update_flight(direct_routes, travel_rest_dat, country_name, date_str)
flights <- data.frame(
origin = direct_routes$source_country,
destination = direct_routes$dest_country
)
# Convert to network
flights <- network(flights, direct = TRUE)
flights %v% "lat" <- countries_geo[network.vertex.names(flights), "country_lat" ]
flights %v% "long" <- countries_geo[network.vertex.names(flights), "country_long" ]
plotcord = data.frame(
long = as.numeric(flights %v% "long"),
lat = as.numeric(flights %v% "lat")
)
# Create edges
edges <- network::as.matrix.network.edgelist(flights)
# Create edges coordinates
edges_mat <- data.frame(
x = plotcord$long[edges[,1]],
xend = plotcord$long[edges[,2]],
y = plotcord$lat[edges[,1]],
yend = plotcord$lat[edges[,2]]
)
covid_map(dat_geo_categ, input$var, color)
getDat <- function(date){
date_url <- paste(paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/", date, sep = ""), ".csv", sep = "")
date_dat <- read_csv(url(date_url))
return(date_dat)
}
# Helper Function: clean covid data, group by country region and make it tidy ----
## args:
## dat: dataset (confirmed cases, deaths cases, recovered cases)
## return:
## dat: cleaned covid data set
clean_coviddat <- function(dat){
dat <- dat %>%
clean_names() %>%
select(country_region, confirmed, recovered, deaths) %>%
mutate(
country_region = case_when(
tolower(country_region) == "hong kong" ~ "china",
tolower(country_region) == "macau" ~ "china",
tolower(country_region) == "mainland china" ~ "china",
TRUE ~ tolower(country_region)
)
) %>%
group_by(country_region) %>%
summarise(
total_confirmed = sum(confirmed, na.rm = TRUE),
total_recovered = sum(recovered, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE)
)
}
# Helper Function: join covid 19 data and map data ----
## args:
## covid_dat: dataset of covid 19
## map_dat: dataset of map
## return:
## dat: joined dataset
joinDat <- function(covid_dat, map_dat){
## Compare country names in the COVID19 datasets and the map dataset
#diff <- data.frame(unique(covid_dat[!(country_names$country_region %in% map_dat$country_region),]$country_region))
#map_country <- data.frame(map_dat$country_region)
### 20 unmatched countries in COVID19 dataset that are NOT in the map dataset
##### CHANGE NAMES IN MAP DATA DATASET #####
#1. COVID 19: antigua and barbuda
## Map: antigua; barbuda
map_dat$country_region[tolower(map_dat$country_region) == "antigua"] <- "antigua and barbuda"
map_dat$country_region[tolower(map_dat$country_region) == "barbuda"] <- "antigua and barbuda"
##2. COVID19: burma
## Map: myanmar
map_dat$country_region[tolower(map_dat$country_region) == "myanmar"] <- "burma"
#3. COVID19: cabo verde
## Map: cape verde
map_dat$country_region[tolower(map_dat$country_region) == "cape verde"] <- "cabo verde"
#4. COVID19: congo (brazzaville)
## Map: republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "republic of congo"] <- "congo (brazzaville)"
#5. COVID19: congo (kinshasa)
## Map: democratic republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "democratic republic of the congo"] <- "congo (kinshasa)"
#6. COVID19: cote d'ivoire
## Map: ivory coast
map_dat$country_region[tolower(map_dat$country_region) == "ivory coast"] <- "cote d'ivoire"
#7. COVID19: czechia
# Map: czech republic
map_dat$country_region[tolower(map_dat$country_region) == "czech republic"] <- "czechia"
#8. COVID19: diamond princess
# Map: NONE
# Not going to be mapped as it is not a country
#9. COVID19: eswatini
# Map: swaziland
map_dat$country_region[tolower(map_dat$country_region) == "swaziland"] <- "eswatini"
#10. COVID19: holy see
# Map: No Match
#11. COVID19: korea, south
## Map: south korea
map_dat$country_region[tolower(map_dat$country_region) == "south korea"] <- "korea, south"
#12. COVID19: ms zaandam
## Map: NONE
# Not going to be mapped as it is not a country
#13. COVID19: north macedonia
## Map: macedonia
map_dat$country_region[tolower(map_dat$country_region) == "macedonia"] <- "north macedonia"
#14. COVID19: saint kitts and nevis
## Map: saint kitts; nevis
map_dat$country_region[tolower(map_dat$country_region) == "saint kitts"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "nevis"] <- "saint kitts and nevis"
#15. COVID19: saint vincent and the grenadines
## Map: saint vincent; grenadines
map_dat$country_region[tolower(map_dat$country_region) == "saint vincent"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "grenadines"] <- "saint vincent and the grenadines"
#16. COVID19: taiwan*
## Map: taiwan
map_dat$country_region[tolower(map_dat$country_region) == "taiwan"] <- "taiwan*"
#17. COVID19: trinidad and tobago
## Map: trinidad; tobago
map_dat$country_region[tolower(map_dat$country_region) == "trinidad"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "tobago"] <- "trinidad and tobago"
#18. COVID19: united kingdom
## Map: uk
map_dat$country_region[tolower(map_dat$country_region) == "uk"] <- "united kingdom"
#19. COVID19: us
## Map: usa
map_dat$country_region[tolower(map_dat$country_region) == "usa"] <- "us"
#20. COVID19: west bank and gaza (no palestine in the dataset)
## Map: palestine
map_dat$country_region[tolower(map_dat$country_region) == "palestine"] <- "west bank and gaza"
## Joing COVID19 dataset and map dataset
covid_geo <- left_join(map_dat, covid_dat, by = "country_region")
#%>%
#complete(date = seq(start_day, end_day, by = "days"), nesting(country_region, ID))
#covid_geo <- left_join(covid, map_dat, by = "country_region") %>%
#select(ID.x, country_region, cases, geom.y)
return(covid_geo)
}
# Helper Function: assign value category to number of cases ----
## args:
## dat: dataset (confirmed cases, deaths cases, recovered cases)
## case: which case to be assign value category to (i.e. confirmed, deaths, recovered)
## return:
## dat: a dataset with the value category added to the given case
assign_categ <- function(dat, case){
if(case == "Confirmed Cases"){
dat <- dat %>%
mutate(
categ = case_when(
total_confirmed >= 0 & total_confirmed <= 199 ~ "0-199",
total_confirmed >= 200 & total_confirmed <= 999 ~ "200-999",
total_confirmed >= 1000 & total_confirmed <= 9999 ~ "1,000-9,999",
total_confirmed >= 10000 & total_confirmed <=499999 ~ "10,000-499,999",
total_confirmed >= 500000 ~ "500,000+"
)
)
}
else{
if(case == "Recovered Cases"){
dat <- dat %>%
mutate(
categ = case_when(
total_recovered >= 0 & total_recovered <= 199 ~ "0-199",
total_recovered >= 200 & total_recovered <= 999 ~ "200-999",
total_recovered >= 1000 & total_recovered <= 9999 ~ "1,000-9,999",
total_recovered >= 10000 & total_recovered <=499999 ~ "10,000-499,999",
total_recovered >= 500000 ~ "500,000+"
)
)
}
else{
dat <- dat %>%
mutate(
categ = case_when(
total_deaths >= 0 & total_deaths <= 199 ~ "0-199",
total_deaths >= 200 & total_deaths <= 999 ~ "200-999",
total_deaths >= 1000 & total_deaths <= 9999 ~ "1,000-9,999",
total_deaths >= 10000 & total_deaths <=499999 ~ "10,000-499,999",
total_deaths >= 500000 ~ "500,000+"
)
)
}
}
return(dat)
}
# Helper Function: map covid 19 data ----
## args:
## dat: dataset to map (confirmed cases, deaths cases, recovered cases)
## legend_title: title of the legend
## color: which set of colors to use for fill
covid_map <- function(dat, legend_title, color) {
plot_dat = dat
plot_dat$categ = factor(plot_dat$categ,
levels = c("0-199",
"200-999",
"1,000-9,999",
"10,000-499,999",
"500,000+"))
covid_map <- ggplot(plot_dat, aes(x = long, y = lat)) +
geom_polygon(aes(group = group, fill = categ)) +
scale_fill_manual(name = legend_title,
values = color,
na.value = "#EEEEEE") +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff",
color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff",
color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
axis.title = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d")
)
covid_map
return(covid_map)
}
covid_map <- covid_map(dat_geo_categ, input$var, color)
dat <- "03-15-2020"
dat <- getDat(date_str) %>% clean_coviddat()
map_dat <- map_data("world") %>%
mutate(region = tolower(region))  %>%
plyr::rename(replace = c(region = "country_region"))
dat_geo <- joinDat(dat, map_dat)
dat_geo_categ <- assign_categ(dat_geo, "Confirmed Cases")
color <- c(
"0-199" = "#FFFFB2",
"200-999" = "#FED976",
"1,000-9,999" = "#FD8D3C",
"10,000-499,999" = "#F03B20",
"500,000+" = "#BD0026")
covid_map <- covid_map(dat_geo_categ, "Confirmed Cases", color)
covid_map + geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.008,
color = dot_color)
View(plotcord)
View(direct_routes)
covid_map +     geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.008,
color = dot_color) +
#geom_text(data = plotcord, mapping = aes(label = labels), hjust = 0, vjust = 0)
geom_curve(
data = edges_mat,
mapping = aes(x = x, xend = xend, y = y, yend = yend),
arrow = arrow(length = unit(0.02, "npc")),
color = curve_color
) +
theme_minimal() +
theme(
### Panel ###
panel.background = element_rect(fill = "#ffffff",
color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
axis.title = element_blank(),
axis.line = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d")
)
covid_map +     geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.008,
color = dot_color) +
#geom_text(data = plotcord, mapping = aes(label = labels), hjust = 0, vjust = 0)
geom_curve(
data = edges_mat,
mapping = aes(x = x, xend = xend, y = y, yend = yend),
arrow = arrow(length = unit(0.02, "npc")),
color = curve_color
) +
theme_minimal() +
theme(
### Panel ###
panel.background = element_rect(fill = "#ffffff",
color = NA),
panel.grid = element_blank(),
### Axis ###
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d")
)
View(map_dat)
unique(map_dat$country_region)
## COVID19 Network Spatial Visualization
## Jingyang Zhang
## network.R
# Load data
## TRAVEL RESTRICTION DATA ##
travel_rest_url <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(travel_rest_url) %>%
select(-X2)
colnames(travel_rest_dat)[1] <- "country"
travel_rest_dat <- travel_rest_dat %>%
pivot_longer(cols = -country,
names_to = "date",
values_to = "restriction")
## HIGH RISK REGIONS DATA ##
## Source: https://www.cdc.gov/coronavirus/2019-ncov/travelers/from-other-countries.html
high_risk <- c("China", "Iran", "Austria", "Belgium", "Czech Republic", "Denmark", "Estonia", "Finland",
"France", "Germany", "Greece", "Hungary", "Iceland", "Italy", "Latvia", "Liechtenstein", "Lithuania",
"Luxembourg", "Malta", "Netherlands", "Norway", "Poland", "Portugal", "Slovakia", "Slovenia", "Spain",
"Sweden", "Switzerland", "Monaco", "San Marino", "Vatican City",
"United Kingdom", "Ireland", "Brazil")
## FLIGHT ROUTES DATA ##
## Source: https://www.kaggle.com/open-flights/flight-route-database
routes <- read_csv("data/routes.csv") %>%
clean_names()
names(routes)[names(routes) == "destination_apirport"] <- "destination_airport"
## Get direct routes
direct_routes <- routes %>% filter(
stops == 0
)
## Source: https://www.kaggle.com/divyanshrai/openflights-airports-database-2017
airports <- read_csv("data/airports.csv") %>%
clean_names() %>%
filter(
iata != "\\N"
) %>% as.data.frame()
rownames(airports) <- airports$iata
# Create a lookup hash table for looking up country of an airport
airports_hash <- hash()
for(i in 1:nrow(airports)){
airports_hash[[airports$iata[i]]] <- airports$country[i]
}
# Helper Function: convert date from the form 01jan2020 to 01-01-2020 ----
## args:
## date: string of date in the form of 01jan2020
## return:
## formatted_date: string of date in the form of 01-01-2020
format_date_str <- function(date){
str <- toString(dmy(date))
splits <- strsplit(str, "-")
yr <- unlist(splits[[1]][1])
month <- unlist(splits[[1]][2])
day <- unlist(splits[[1]][3])
formated_date <- paste(paste(month, day, sep = "-"), yr, sep = "-")
return(formated_date)
}
# Reformat date column in travel restriction data
for(i in 1:nrow(travel_rest_dat)){
travel_rest_dat$date[i] <- format_date_str(travel_rest_dat$date[i])
}
# Helper Function: check international travel restriction status ----
## args:
## travel_rest_dat: travel restriction dataset
## country_name: the country of interest
## date_str: the date of interest, format 01-22-2020
## return:
## travel_rest_status: an indicator (double) of travel restriction status:
## 0: no measures
## 1: screening
## 2: quarantine arrivals from high-risk regions
## 3: ban on high-risk regions
## 4: total border closure
## No data: blank
check_travel_rest <- function(travel_rest_dat, country_name, date_str){
rest_status <- travel_rest_dat %>%
filter(country == country_name & date == date_str)
print(as.double(rest_status$restriction))
return(as.double(rest_status$restriction))
}
# Helper Function: update flight routes information according to the travel restriction status----
## args:
## direct_routes_dat: direct flight routes data,
## travel_rest_dat: travel restriction dataset
## country_name: country of interest
## date_str: date of interest
## return
## updated_flight_dat: updated flight routes data
update_flight <- function(direct_routes_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
print(travel_rest_status)
# If travel restriction = 3: ban on high risk regions, then remove all flights into/out of high risk countries
if(travel_rest_status == 3){
for(i in 1 : length(high_risk)){
direct_routes_dat <- direct_routes_dat[!(direct_routes_dat$dest_country == high_risk[i] | direct_routes_dat$source_country == high_risk[i]),]
}
}
else{
if(travel_rest_status == 4){
# If travel restriction = 4: total border closure, then remove all flights into/out of  the given country
direct_routes_dat <- direct_routes_dat[!(direct_routes_dat$dest_country == country_name | direct_routes_dat$source_country == country_name),]
}
}
print(nrow(direct_routes_dat))
return(direct_routes_dat)
}
# Helper Function: find country for a given IATA code ----
## args:
## airports_hash: hastable of key = IATA and value = country name
## IATA: IATA code string
## return:
## country: country name of the given IATA code
country_lookup <- function(airports_hash, iata){
return(airports_hash[[iata]])
}
# Create a lookup hash table for looking up country latitude
airport_lat_hash <- hash()
for(i in 1:nrow(airports)){
airport_lat_hash[[airports$iata[i]]] <- airports$latitude[i]
}
# Create a lookup hash table for looking up country longtitude
airport_long_hash <- hash()
for(i in 1:nrow(airports)){
airport_long_hash[[airports$iata[i]]] <- airports$longitude[i]
}
# Helper Function: find country for a given IATA code ----
## args:
## airports_hash: hastable of key = IATA and value = country name
## IATA: IATA code string
## return:
## country: country name of the given IATA code
country_lookup <- function(airports_hash, iata){
return(airports_hash[[iata]])
}
# Helper Function: find latitude or longitude of a given airport ----
## args:
## airport_lat_hash: hastable of key = airport iata, value = latitude
## airport_long_hash: hashtable of key = airport iata, value = longitude
## iata: iata of the airport
## return:
## lat or long: latitude or longitude of the given airport
geo_lookup <- function(airport_lat_hash = NULL, airport_long_hash = NULL, iata){
if(!is.null(airport_lat_hash)){
return(airport_lat_hash[[iata]])
}
if(!is.null(airport_long_hash)){
return(airport_long_hash[[iata]])
}
}
# Add source country and destination country to direct_routes dataframe
## Initialize an empty column
# Add source country geo code and destination country geocode to direct_routes dataframe
## Initialize an empty column
direct_routes <- direct_routes %>%
mutate(
source_country = NA,
dest_country = NA,
source_airport_lat = NA,
source_airport_long = NA,
dest_airport_lat = NA,
dest_airport_long = NA
)
for(i in 1:nrow(direct_routes)){
source = country_lookup(airports_hash, direct_routes$source_airport[i])
if(!is.null(source)){
direct_routes$source_country[i] = source
source_lat = geo_lookup(airport_lat_hash, NULL, direct_routes$source_airport[i])
source_long = geo_lookup(NULL, airport_long_hash, direct_routes$source_airport[i])
if(!is.null(source_lat) & !is.null(source_long)){
direct_routes$source_airport_lat[i] = source_lat
direct_routes$source_airport_long[i] = source_long
}
}
dest = country_lookup(airports_hash, direct_routes$destination_airport[i])
if(!is.null(dest)){
direct_routes$dest_country[i] = dest
dest_lat = geo_lookup(airport_lat_hash, NULL, direct_routes$destination_airport[i])
dest_long = geo_lookup(NULL, airport_long_hash, direct_routes$destination_airport[i])
if(!is.null(dest_lat) & !is.null(dest_long)){
direct_routes$dest_airport_lat[i] = dest_lat
direct_routes$dest_airport_long[i] = dest_long
}
}
}
# Remove demostic flights
direct_routes <- direct_routes %>%
filter(source_country != dest_country)
