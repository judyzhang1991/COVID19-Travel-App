panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
axis.title = element_blank(),
axis.line = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d")
)
}
plot_routes(direct_routes, "United States", covid_map, "In")
View(direct_routes)
plot_routes <- function(direct_routes, country_name, world_map, InOut){
if(InOut == "In"){
direct_routes <- direct_routes %>% filter(source_country == country_name)
curve_color = "#16a085"
dot_color = "#ccffff"
}
else{
direct_routes <- direct_routes %>% filter(dest_country == country_name)
curve_color = "#490e60"
dot_color = "#ffe5e5"
}
flights <- data.frame(
origin = direct_routes$source_country,
destination = direct_routes$dest_country
)
# Convert to network
flights <- network(flights, direct = TRUE)
# Add geographic coordinates
flights %v% "lat" <- countries_geo[network.vertex.names(flights), "country_lat" ]
flights %v% "long" <- countries_geo[network.vertex.names(flights), "country_long" ]
# Get country geo code
plotcord = data.frame(
long = as.numeric(flights %v% "long"),
lat = as.numeric(flights %v% "lat")
)
# Create edges
edges <- network::as.matrix.network.edgelist(flights)
# Create edges coordinates
edges_mat <- data.frame(
x = plotcord$long[edges[,1]],
xend = plotcord$long[edges[,2]],
y = plotcord$lat[edges[,1]],
yend = plotcord$lat[edges[,2]]
)
world_map +
geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.005,
color = dot_color) +
geom_curve(
data = edges_mat,
mapping = aes(x = x, xend = xend, y = y, yend = yend),
arrow = arrow(length = unit(0.02, "npc")),
color = curve_color
) +
geom_text(aes(label = destination_airport)) +
theme_minimal() +
theme(
### Panel ###
panel.background = element_rect(fill = "#ffffff",
color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
axis.title = element_blank(),
axis.line = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d")
)
}
plot_routes(direct_routes, "United States", covid_map, "In")
direct_routes <- direct_routes %>% filter(source_country == country_name)
curve_color = "#16a085"
dot_color = "#ccffff"
country_name <- "United States"
direct_routes <- direct_routes %>% filter(source_country == country_name)
curve_color = "#16a085"
dot_color = "#ccffff"
flights <- data.frame(
origin = direct_routes$source_country,
destination = direct_routes$dest_country
)
# Convert to network
flights <- network(flights, direct = TRUE)
flights %v% "lat" <- countries_geo[network.vertex.names(flights), "country_lat" ]
flights %v% "long" <- countries_geo[network.vertex.names(flights), "country_long" ]
plotcord = data.frame(
long = as.numeric(flights %v% "long"),
lat = as.numeric(flights %v% "lat")
)
# Create edges
edges <- network::as.matrix.network.edgelist(flights)
# Create edges coordinates
edges_mat <- data.frame(
x = plotcord$long[edges[,1]],
xend = plotcord$long[edges[,2]],
y = plotcord$lat[edges[,1]],
yend = plotcord$lat[edges[,2]]
)
View(plotcord)
View(map_dat)
View(edges_mat)
edges[,1]
edges
View(direct_routes)
plot_routes <- function(direct_routes, country_name, world_map, InOut){
if(InOut == "In"){
direct_routes <- direct_routes %>% filter(source_country == country_name)
curve_color = "#16a085"
dot_color = "#ccffff"
}
else{
direct_routes <- direct_routes %>% filter(dest_country == country_name)
curve_color = "#490e60"
dot_color = "#ffe5e5"
}
flights <- data.frame(
origin = direct_routes$source_country,
destination = direct_routes$dest_country
)
# Convert to network
flights <- network(flights, direct = TRUE)
# Add geographic coordinates
flights %v% "lat" <- countries_geo[network.vertex.names(flights), "country_lat" ]
flights %v% "long" <- countries_geo[network.vertex.names(flights), "country_long" ]
# Get country geo code
plotcord = data.frame(
long = as.numeric(flights %v% "long"),
lat = as.numeric(flights %v% "lat")
)
# Create edges
edges <- network::as.matrix.network.edgelist(flights)
# Create edges coordinates
edges_mat <- data.frame(
x = plotcord$lat[edges[,1]],
xend = plotcord$lat[edges[,2]],
y = plotcord$long[edges[,1]],
yend = plotcord$long[edges[,2]]
)
world_map +
geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.005,
color = dot_color) +
geom_curve(
data = edges_mat,
mapping = aes(x = x, xend = xend, y = y, yend = yend),
arrow = arrow(length = unit(0.02, "npc")),
color = curve_color
) +
theme_minimal() +
theme(
### Panel ###
panel.background = element_rect(fill = "#ffffff",
color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
axis.title = element_blank(),
axis.line = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d")
)
}
plot_routes(direct_routes, "United States", covid_map, "In")
# Create edges coordinates
edges_mat <- data.frame(
x = plotcord$long[edges[,1]],
xend = plotcord$long[edges[,2]],
y = plotcord$lat[edges[,1]],
yend = plotcord$lat[edges[,2]]
)
View(plotcord)
edges[,2]
world_map +
geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.005,
color = dot_color)
world_map <- covid_map
world_map +
geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.005,
color = dot_color)
world_map +
geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.005,
color = dot_color) +
geom_text(aes(label = c(lat, long)), hjust = 0, vjust = 0)
for(i in 1:length(plotcord$long)){}
labels = c()
for(i in 1:length(plotcord$long)){
label = paste(plotcord$lat[i], plotcord$long[i], sep = ",")
labels[i] = label
}
plotcord$labels <- NA
View(plotcord)
for(i in 1:length(plotcord$long)){
label = paste(plotcord$lat[i], plotcord$long[i], sep = ",")
plotcord$labels[i] = label
}
View(plotcord)
world_map +
geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.005,
color = dot_color) +
geom_text(aes(label = labels), hjust = 0, vjust = 0)
world_map +
geom_point(data = plotcord, mapping = aes(x = long, y = lat),
size = 0.005,
color = dot_color) +
geom_text(data = plotcord, mapping = aes(label = labels), hjust = 0, vjust = 0)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print_input <- function(var){
print(var)
}
runApp()
runApp()
runApp()
runApp()
View(direct_routes)
countries = c(direct_routes$source_country, direct_routes$dest_country)
View(countries_geo)
View(countries_geo)
countries <- data.frame(countries)
View(countries)
countries <- data.frame(unique(countries))
countries <- unique(c(direct_routes$source_country, direct_routes$dest_country))
countries
runApp()
runApp()
runApp()
# Load data
travel_restrictions <- getURL("blob:https://ourworldindata.org/31d72e46-a53f-4b65-806c-f4ea4d7e5d50")
library(RCurl)
# Load data
travel_restrictions <- getURL("blob:https://ourworldindata.org/31d72e46-a53f-4b65-806c-f4ea4d7e5d50")
# Load data
travel_restrictions <- getURL("https://ourworldindata.org/31d72e46-a53f-4b65-806c-f4ea4d7e5d50")
# Load data
travel_restrictions <- getURL("https://github.com/OxCGRT/covid-policy-tracker/raw/master/data/timeseries/OxCGRT_timeseries_all.xlsx")
# Load data
travel_restrictions <- url("https://github.com/OxCGRT/covid-policy-tracker/raw/master/data/timeseries/OxCGRT_timeseries_all.xlsx")
travel_rest_dat <- read_csv(url)
# Load data
travel_restrictions <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(url)
# Load data
travel_restrictions <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(travel_restrictions)
View(travel_rest_dat)
travel_rest_dat <- read_csv(travel_rest_url) %>% clean_names()
# Load data
travel_rest_url <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(travel_rest_url) %>% clean_names()
View(travel_rest_dat)
View(travel_rest_dat)
travel_rest_dat <- read_csv(travel_rest_url)
## TRAVEL RESTRICTION DATA ##
travel_rest_url <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(travel_rest_url)
View(travel_rest_dat)
travel_rest_dat <- read_csv(travel_rest_url) %>%
select(-X2)
## TRAVEL RESTRICTION DATA ##
travel_rest_url <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(travel_rest_url) %>%
select(-X2)
View(travel_rest_dat)
colnames(travel_rest_dat)[1] <- "country"
View(travel_rest_dat)
travel_rest_dat <- travel_rest_dat %>%
pivot_longer(cols = -country,
names_to = "date",
values_to = "restriction")
View(travel_rest_dat)
format("01jan2020", "MM-DD-YYYY")
library(lubridate)
x = "01jan2020"
dmy(x)
ymd(x)
x = "01jan2020"
y = mdy(x)
y
dmy(x)
y = dmy(x)
date = "01jan2020"
str <- dmy(date)
strsplit(str, "-")
typeof(str)
str <- as.string(dmy(date))
str <- toString(dmy(date))
strsplit(str, "-")
strsplit(str, "-")[1]
strsplit(str, "-")[[1]][1]
format_date_str <- function(date){
str <- toString(dmy(date))
splits <- strsplit(str, "-")
yr <- splits[[1]][1]
month <- splits[[1]][2]
day <- splits[[1]][3]
}
format_date_str("22jan2020")
formated_date <- paste(month, day, sep = "-")
yr <- unlist(splits[[1]][1])
month <- unlist(splits[[1]][2])
day <- unlist(splits[[1]][3])
splits <- strsplit(str, "-")
yr <- unlist(splits[[1]][1])
month <- unlist(splits[[1]][2])
day <- unlist(splits[[1]][3])
formated_date <- paste(month, day, sep = "-")
formated_date
format_date_str <- function(date){
str <- toString(dmy(date))
splits <- strsplit(str, "-")
yr <- unlist(splits[[1]][1])
month <- unlist(splits[[1]][2])
day <- unlist(splits[[1]][3])
formated_date <- paste(paste(month, day, sep = "-"), yr, sep = "-")
return(formated_date)
}
format_date_str("22jan2020")
travel_rest_dat <- travel_rest_dat %>%
format_date_str(date)
travel_rest_dat$date <- format_date_str(travel_rest_dat$date)
View(travel_rest_dat)
travel_rest_url <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(travel_rest_url) %>%
select(-X2)
colnames(travel_rest_dat)[1] <- "country"
travel_rest_dat <- travel_rest_dat %>%
pivot_longer(cols = -country,
names_to = "date",
values_to = "restriction")
View(travel_rest_dat)
format_date_str(travel_rest_dat$date[1])
format_date_str(travel_rest_dat$date[2])
for(i in 1:nrow(travel_rest_dat)){
travel_rest_dat$date[i] <- format_date_str(travel_rest_dat$date[i])
}
View(travel_rest_dat)
View(direct_routes)
View(travel_rest_dat)
check_travel_rest <- function(travel_rest_dat, country, date){
rest_status <- travel_rest_dat %>%
filter(country == country, date == date)
return(rest_status$restriction)
}
check_travel_rest(travel_rest_dat, "Aruba", "04-18-2020")
check_travel_rest <- function(travel_rest_dat, country, date){
rest_status <- travel_rest_dat %>%
filter(country == country & date == date)
return(rest_status$restriction)
}
check_travel_rest(travel_rest_dat, "Aruba", "04-18-2020")
travel_rest_dat %>% filter(country == "Aruba" & date == "04-18-2020")
test = travel_rest_dat %>% filter(country == "Aruba" & date == "04-18-2020")
test$restriction
as.double(test$restriction)
test = travel_rest_dat %>% filter(country == country[1] & date == date[1])
test
check_travel_rest <- function(travel_rest_dat, country_name, date_str){
rest_status <- travel_rest_dat %>%
filter(country == country_name & date == date_str)
return(rest_status$restriction)
}
check_travel_rest(travel_rest_dat, "Aruba", "04-18-2020")
check_travel_rest <- function(travel_rest_dat, country_name, date_str){
rest_status <- travel_rest_dat %>%
filter(country == country_name & date == date_str)
return(as.double(rest_status$restriction))
}
check_travel_rest(travel_rest_dat, "Aruba", "04-18-2020")
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
if(travel_rest_status == 4){
flight_dat <- flight_dat[!(flight_dat$country == country_name $ flight_dat$date == date_str),]
}
return(flight_dat)
}
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
if(travel_rest_status == 4){
flight_dat <- flight_dat[!(flight_dat$country == country_name $ flight_dat$date == date_str),]
}
return(flight_dat)
}
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
}
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
if(travel_rest_status == 4){
flight_dat <- flight_dat[!(flight_dat$country == country_name $ flight_dat$date == date_str),]
}
}
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
if(travel_rest_status == 4){
flight_dat <- flight_dat[!(flight_dat$country == country_name & flight_dat$date == date_str),]
}
return(flight_dat)
}
update_flight(direct_routes, travel_rest_dat, "Aruba", "04-18-2020")
flight_dat[!(flight_dat$country == "Aruba" & flight_dat$date == "04-18-2020"),]
View(direct_routes)
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
if(travel_rest_status == 4){
flight_dat <- flight_dat[!(flight_dat$source_country == country_name),]
}
return(flight_dat)
}
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
if(travel_rest_status == 4){
flight_dat <- flight_dat[!(flight_dat$dest_country == country_name),]
}
return(flight_dat)
}
update_flight <- function(flight_dat, travel_rest_dat, country_name, date_str){
travel_rest_status <- check_travel_rest(travel_rest_dat, country_name, date_str)
if(travel_rest_status == 4){
# If travel restriction = 4: total border closure, then remove all flights into given country
flight_dat <- flight_dat[!(flight_dat$dest_country == country_name),]
}
return(flight_dat)
}
update_flight(direct_routes, travel_rest_dat, "Aruba", "04-18-2020")
test = update_flight(direct_routes, travel_rest_dat, "Aruba", "04-18-2020")
View(test)
routes <- read_csv("data/routes.csv") %>%
clean_names()
names(routes)[names(routes) == "destination_apirport"] <- "destination_airport"
## Get direct routes
direct_routes <- routes %>% filter(
stops == 0
)
View(direct_routes)
## Source: https://www.kaggle.com/divyanshrai/openflights-airports-database-2017
airports <- read_csv("data/airports.csv") %>%
clean_names() %>%
filter(
iata != "\\N"
) %>% as.data.frame()
rownames(airports) <- airports$iata
airports_hash <- hash()
for(i in 1:nrow(airports)){
airports_hash[[airports$iata[i]]] <- airports$country[i]
}
format_date_str <- function(date){
str <- toString(dmy(date))
splits <- strsplit(str, "-")
yr <- unlist(splits[[1]][1])
month <- unlist(splits[[1]][2])
day <- unlist(splits[[1]][3])
formated_date <- paste(paste(month, day, sep = "-"), yr, sep = "-")
return(formated_date)
}
for(i in 1:nrow(travel_rest_dat)){
travel_rest_dat$date[i] <- format_date_str(travel_rest_dat$date[i])
}
check_travel_rest <- function(travel_rest_dat, country_name, date_str){
rest_status <- travel_rest_dat %>%
filter(country == country_name & date == date_str)
return(as.double(rest_status$restriction))
}
runApp()
countries <- sort(unique(c(direct_routes$source_country, direct_routes$dest_country)))
countries
