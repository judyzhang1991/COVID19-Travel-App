labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+"))
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom)) +
scale_fill_viridis_c(option="inferno",
name=legend_title,
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
guides(fill = guide_legend()) +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
legend.position = "bottom",
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom)) +
scale_fill_viridis_c(option="inferno",
name=legend_title,
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
#guides(fill = guide_legend()) +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
legend.position = "bottom",
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
covid_map <- function(dat, date_input, legend_title) {
## Filter date to find the given date
plot_dat <- dat %>%
filter(date == date_input)
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_viridis_c(option="inferno",
name=legend_title,
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
}
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_viridis_c(option="inferno",
name=legend_title,
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_viridis_c(option="inferno",
name=legend_title,
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
panel.grid = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_viridis_c(option="inferno",
name=legend_title,
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
View(plot_dat)
ggplot(plot_dat) +
geom_sf(aes(fill = categ,
geometry = geom),
color = "white") +
scale_fill_viridis_c(option="inferno",
name=legend_title,
#trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
# Cutoffs based on the number of cases
val_breaks <- c(1, 20 , 100, 1000, 50000)
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_manual(name=legend_title,
values = c("#FFFFB2",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#F03B20"),
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
ggplot(plot_dat) +
geom_sf(aes(fill = categ,
geometry = geom),
color = "white") +
scale_fill_manual(name=legend_title,
values = c("#FFFFB2",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#F03B20"),
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
ggplot(plot_dat) +
geom_sf(aes(fill = categ,
geometry = geom),
color = "white") +
scale_fill_manual(name=legend_title,
values = c("#FFFFB2",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#F03B20"),
breaks = val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
ggplot(plot_dat) +
geom_sf(aes(fill = categ,
geometry = geom),
color = "white") +
scale_fill_manual(name=legend_title,
values = c("#FFFFB2",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#F03B20"),
breaks = val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+"))
ggplot(plot_dat) +
geom_sf(aes(fill = categ,
geometry = geom),
color = "white") +
scale_fill_manual(name=legend_title,
values = c("red",
"green",
"yellow",
"purple",
"black"),
breaks = val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+"))
ggplot(plot_dat) +
geom_sf(aes(fill = factor(categ),
geometry = geom),
color = "white") +
scale_fill_manual(name=legend_title,
values = c("red",
"green",
"yellow",
"purple",
"black"),
breaks = val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+"))
ggplot(plot_dat) +
geom_sf(aes(fill = factor(categ),
geometry = geom),
color = "white") +
scale_fill_gradientn(name = legend_title,
breaks = val_breaks,
#labels = key_labs,
colors = c("yellow", "black"))
ggplot(plot_dat) +
geom_sf(aes(fill = factor(categ),
geometry = geom),
color = "white") +
scale_fill_manual(name = legend_title,
breaks = val_breaks,
#labels = key_labs,
colors = c("yellow", "black", "red", "orange", "blue"))
ggplot(plot_dat) +
geom_sf(aes(fill = factor(categ),
geometry = geom),
color = "white") +
scale_fill_manual(name = legend_title,
breaks = val_breaks,
#labels = key_labs,
values = c("yellow", "black", "red", "orange", "blue"))
typeof(as.factor(plot_dat$categ))
typeof(plot_dat$categ)
ggplot(plot_dat) +
geom_sf(aes(fill = as.factor(categ),
geometry = geom),
color = "white") +
scale_fill_manual(name = legend_title,
breaks = val_breaks,
#labels = key_labs,
values = c("yellow", "black", "red", "orange", "blue"))
ggplot(plot_dat) +
geom_sf(aes(fill = as.factor(categ),
geometry = geom),
color = "white") +
scale_fill_gradientn(name = legend_title,
breaks = val_breaks,
#labels = key_labs,
colors = c("yellow", "orange", "red"))
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_gradientn(name = legend_title,
breaks = val_breaks,
#labels = key_labs,
colors = c("yellow", "orange", "red"))
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_gradientn(name = legend_title,
breaks = val_breaks,
labels = val_breaks,
colors = c("yellow", "orange", "red"))
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_gradientn(name = legend_title,
breaks = val_breaks,
labels = val_breaks,
colors = c("#FFFFB2", "#FD8D3C", "#B10026"))
key_labs <- c("1-19,
20-99,
100-999,
1,000-49,999,
50,000+")
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_gradientn(name = legend_title,
breaks = val_breaks,
labels = key_labs,
colors = c("#FFFFB2", "#FD8D3C", "#B10026"))
length(val_breaks)
length(key_labs)
key_labs <- c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")
ggplot(plot_dat) +
geom_sf(aes(fill = cases,
geometry = geom),
color = "white") +
scale_fill_gradientn(name = legend_title,
breaks = val_breaks,
labels = key_labs,
colors = c("#FFFFB2", "#FD8D3C", "#B10026")) +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff", color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff", color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff", color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
shiny::runApp()
runApp()
runApp()
clean_coviddat <- function(dat){
dat <- dat %>%
clean_names() %>%
group_by(country_region) %>%
summarise_at(vars(starts_with('x')), sum) %>%
pivot_longer(cols = -country_region,
names_to = "date",
values_to = "cases") %>%
# Remove "x" from date, change date format to %d-%m-%y
mutate(
date = str_replace_all(str_replace(date, "x", ""), "_", "-"),
country_region = tolower(country_region),
categ = case_when(
cases >= 0 & cases <= 19 ~ "0-19",
cases >= 20 & cases <= 99 ~ "20-99",
cases >= 100 & cases <= 999 ~ "100-999",
cases >= 1000 & cases <= 49999 ~ "1000-49,999",
cases >= 50000 ~ "50,000+"
)
)
}
library(shiny)
library(maps)
library(tidyverse)
library(janitor)
library(sf)
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
View(confirmed_dat)
runApp()
runApp()
runApp()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
View(deaths_dat)
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_coviddat()
View(deaths_dat)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
deaths_geo <- left_join(deaths_dat, map_dat, by = "county_region")
runApp()
runApp()
runApp()
unique(plot_dat$categ)
unique(confirmed_geo$categ)
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
View(confirmed_dat)
unique(confirmed_dat$categ)
runApp()
runApp()
runApp()
runApp()
runApp()
