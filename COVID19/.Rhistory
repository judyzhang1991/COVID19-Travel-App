legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d")
)
}
}
plot_routes(direct_routes, travel_rest_dat, "United States", covid_map, "Out", date)
check_travel_rest <- function(travel_rest_dat, country_name, date_str){
rest_status <- travel_rest_dat %>%
filter(country == country_name & date == date_str)
print(as.double(rest_status$restriction))
return(as.double(rest_status$restriction))
}
check_travel_rest(trave_rest_dat, "United States", date)
check_travel_rest(travel_rest_dat, "United States", date)
date = "01-22-2020"
plot_routes(direct_routes, travel_rest_dat, "United States", covid_map, "Out", date)
check_travel_rest(travel_rest_dat, "United States", date)
View(travel_rest_dat)
date = "12-05-2020"
check_travel_rest(travel_rest_dat, "United States", date)
plot_routes(direct_routes, travel_rest_dat, "United States", covid_map, "Out", date)
## TRAVEL RESTRICTION DATA ##
travel_rest_url <- url("https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/timeseries/c8_internationaltravel.csv")
travel_rest_dat <- read_csv(travel_rest_url) %>%
select(-X2)
colnames(travel_rest_dat)[1] <- "country"
travel_rest_dat <- travel_rest_dat %>%
pivot_longer(cols = -country,
names_to = "date",
values_to = "restriction")
## HIGH RISK REGIONS DATA ##
## Source: https://www.cdc.gov/coronavirus/2019-ncov/travelers/from-other-countries.html
high_risk <- c("China", "Iran", "Austria", "Belgium", "Czech Republic", "Denmark", "Estonia", "Finland",
"France", "Germany", "Greece", "Hungary", "Iceland", "Italy", "Latvia", "Liechtenstein", "Lithuania",
"Luxembourg", "Malta", "Netherlands", "Norway", "Poland", "Portugal", "Slovakia", "Slovenia", "Spain",
"Sweden", "Switzerland", "Monaco", "San Marino", "Vatican City",
"United Kingdom", "Ireland", "Brazil")
format_date_str <- function(date){
str <- toString(dmy(date))
splits <- strsplit(str, "-")
yr <- unlist(splits[[1]][1])
month <- unlist(splits[[1]][2])
day <- unlist(splits[[1]][3])
formated_date <- paste(paste(month, day, sep = "-"), yr, sep = "-")
return(formated_date)
}
travel_rest_dat$date <- apply(travel_rest_dat[,2], MARGIN = 1, FUN = format_date_str)
plot_routes(direct_routes, travel_rest_dat, "United States", covid_map, "In", "01-22-2020")
plot_routes(direct_routes, travel_rest_dat, "China", covid_map, "Out", "01-22-2020")
runApp()
## BORDERING COUNTRY DATA ##
borders <- url("https://raw.githubusercontent.com/geodatasource/country-borders/master/GEODATASOURCE-COUNTRY-BORDERS.CSV")
## BORDERING COUNTRY DATA ##
borders_url <- url("https://raw.githubusercontent.com/geodatasource/country-borders/master/GEODATASOURCE-COUNTRY-BORDERS.CSV")
borders <- read_csv(border_url)
library(tidyverse)
library(pandas)
library(tidyverse)
library(readr)
## BORDERING COUNTRY DATA ##
borders_url <- url("https://raw.githubusercontent.com/geodatasource/country-borders/master/GEODATASOURCE-COUNTRY-BORDERS.CSV")
borders <- read_csv(border_url)
borders <- read_csv(borders_url)
View(borders)
getDat <- function(date){
date_url <- paste(paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/", date, sep = ""), ".csv", sep = "")
date_dat <- read_csv(url(date_url))
return(date_dat)
}
date_str <- "05-22-2020"
covid19 <- getDat(date_str)
u=c(0,1,3,2,4,2)
v=c(0,0,0,1,1,2)
z=c(5.19, 6.24, 5.05, 6.16, 4.79, 6.15)
datP2=as.data.frame(cbind(u,v,z))
coord=matrix(c(u,v), ncol=2)
nb=dnearneigh(coord, d1=0, d2=sqrt(2))
wt=nb2listw(nb, style="B")
library(spdep)
library(combinat)
coord=matrix(c(u,v), ncol=2)
nb=dnearneigh(coord, d1=0, d2=sqrt(2))
wt=nb2listw(nb, style="B")
wt
connect_matrx <- matrix(data = NA, nrow = nrow(borders), ncol = nrow(borders))
View(borders)
diag(connect_matrx) <- 0
borders_countries <- borders %>% filter(country_name == "China")
View(borders_countries)
get_borders <- function(borders, country){
border_countries <- borders %>% filter(country_name == country)
border_countries <- border_countries$country_border_name
return(border_countries)
}
get_borders(borders, "China")
countries <- borders$country_name
nrow(connect_matrx)
ncol(connect_matrx)
countries <- borders$country_name
countries[1]
for(j in 1 : ncol(connect_matrx)){
for(i in 1 : nrow(connect_matrx)){
connect_matrx[i, j] <- countries[i]
}
}
View(connect_matrx)
View(borders)
countries <- unique(borders$country_name)
countries <- unique(borders$country_name)
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
for(j in 1 : ncol(connect_matrx)){
for(i in 1 : nrow(connect_matrx)){
connect_matrx[i, j] <- countries[i]
}
}
View(connect_matrx)
for(i in 1 : nrow(connect_matrx)){
for(j in 1 : ncol(connect_matrx)){
connect_matrx[i, j] <- countries[i]
}
}
View(connect_matrx)
colnames(connect_matrx) <- countries
View(connect_matrx)
get_connect <- function(borders){
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames <- countries
rownames <- countries
}
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
View(connect_matrx)
connect_matrx['Afghanistan', 'Andorra']
# Get border information of every country in the countries list
for(i in 1: length(countries)){
country <- countries[i]
borders <- get_borders(borders, country)
for(j in 1:length(borders)){
connect_matrx[borders[j], country] <- 1
}
}
country <- countries[1]
borders <- get_borders(borders, country)
ccountry
country
borders <- get_borders(borders, "Andorra")
get_borders <- function(borders, country){
border_countries <- borders %>% filter(country_name == country)
border_countries <- border_countries$country_border_name
return(border_countries)
}
get_borders(borders, "United States")
get_borders(borders, "China")
typeof(borders)
borders_url <- url("https://raw.githubusercontent.com/geodatasource/country-borders/master/GEODATASOURCE-COUNTRY-BORDERS.CSV")
borders <- read_csv(borders_url)
get_borders <- function(borders, country){
border_countries <- borders %>% filter(country_name == country)
border_countries <- border_countries$country_border_name
return(border_countries)
}
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
# Get border information of every country in the countries list
for(i in 1: length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
for(j in 1:length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
# Get border information of every country in the countries list
for(i in 1: 2){
country <- countries[i]
border_countries <- get_borders(borders, country)
for(j in 1:length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
View(connect_matrx)
# Get border information of every country in the countries list
for(i in 1: length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
for(j in 1:length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
# Get border information of every country in the countries list
for(i in 1: length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
for(j in 1:1){
connect_matrx[border_countries[j], country] <- 1
}
}
length(border_countries)
border_countries
country
View(borders)
get_connect <- function(borders){
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
# Get border information of every country in the countries list
for(i in 1 : length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
if(is.na(border_countries)){
next
}
else{
if(length(border_countries) > 1){
for(j in 1 : length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
else{
connect_matrx[border_countries, country] <- 1
}
}
}
}
for(i in 1 : length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
if(is.na(border_countries)){
next
}
else{
if(length(border_countries) > 1){
for(j in 1 : length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
else{
connect_matrx[border_countries, country] <- 1
}
}
}
View(connect_matrx)
get_connect <- function(borders){
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
# Get border information of every country in the countries list
for(i in 1 : length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
if(is.na(border_countries)){
next
}
else{
if(length(border_countries) > 1){
for(j in 1 : length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
else{
connect_matrx[border_countries, country] <- 1
}
}
}
# Replace all NA with 0s
connect_matrx[is.na(connect_matrx)] <- 0
}
get_connect(borders)
View(connect_matrx)
View(connect_matrx)
get_connect(borders)
View(connect_matrx)
# Replace all NA with 0s
connect_matrx[is.na(connect_matrx)] <- 0
View(connect_matrx)
library(tidyverse)
library(readr)
source("map_covid.R")
get_borders <- function(borders, country){
border_countries <- borders %>% filter(country_name == country)
border_countries <- border_countries$country_border_name
return(border_countries)
}
get_connect <- function(borders){
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
# Get border information of every country in the countries list
for(i in 1 : length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
if(is.na(border_countries)){
next
}
else{
if(length(border_countries) > 1){
for(j in 1 : length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
else{
connect_matrx[border_countries, country] <- 1
}
}
}
# Replace all NA with 0s
connect_matrx[is.na(connect_matrx)] <- 0
}
# Get connectivity matrix
connect_matrx <- get_connect(borders)
# Get list of unique countries
countries <- unique(borders$country_name)
borders_url <- url("https://raw.githubusercontent.com/geodatasource/country-borders/master/GEODATASOURCE-COUNTRY-BORDERS.CSV")
borders <- read_csv(borders_url)
# Get connectivity matrix
connect_matrx <- get_connect(borders)
get_connect <- function(borders){
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
# Get border information of every country in the countries list
for(i in 1 : length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
if(is.na(border_countries)){
next
}
else{
if(length(border_countries) > 1){
for(j in 1 : length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
else{
connect_matrx[border_countries, country] <- 1
}
}
}
# Replace all NA with 0s
connect_matrx[is.na(connect_matrx)] <- 0
}
# Get connectivity matrix
connect_matrx <- get_connect(borders)
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
# Get border information of every country in the countries list
for(i in 1 : length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
if(is.na(border_countries)){
next
}
else{
if(length(border_countries) > 1){
for(j in 1 : length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
else{
connect_matrx[border_countries, country] <- 1
}
}
}
View(connect_matrx)
# Replace all NA with 0s
connect_matrx[is.na(connect_matrx)] <- 0
View(connect_matrx)
# Chunk 1
library(tidyverse)
library(readr)
# Chunk 2
source("map_covid.R")
# Chunk 3
borders_url <- url("https://raw.githubusercontent.com/geodatasource/country-borders/master/GEODATASOURCE-COUNTRY-BORDERS.CSV")
borders <- read_csv(borders_url)
# Chunk 4
date_str <- "05-22-2020"
covid19 <- getDat(date_str)
# Chunk 5
get_borders <- function(borders, country){
border_countries <- borders %>% filter(country_name == country)
border_countries <- border_countries$country_border_name
return(border_countries)
}
# Chunk 6
countries <- unique(borders$country_name)
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
for(i in 1 : nrow(connect_matrx)){
for(j in 1 : ncol(connect_matrx)){
connect_matrx[i, j] <- countries[i]
}
}
get_connect <- function(borders){
# Get list of unique countries
countries <- unique(borders$country_name)
# Create an empty connect matrix
connect_matrx <- matrix(data = NA, nrow = length(countries), ncol = length(countries))
colnames(connect_matrx) <- countries
rownames(connect_matrx) <- countries
# Get border information of every country in the countries list
for(i in 1 : length(countries)){
country <- countries[i]
border_countries <- get_borders(borders, country)
if(is.na(border_countries)){
next
}
else{
if(length(border_countries) > 1){
for(j in 1 : length(border_countries)){
connect_matrx[border_countries[j], country] <- 1
}
}
else{
connect_matrx[border_countries, country] <- 1
}
}
}
# Replace all NA with 0s
connect_matrx[is.na(connect_matrx)] <- 0
return(connect_matrx)
}
# Get connectivity matrix
connect_matrx <- get_connect(borders)
View(connect_matrx)
View(covid19)
library(janitor)
borders <- read_csv(borders_url) %>% clean_names()
borders_url <- url("https://raw.githubusercontent.com/geodatasource/country-borders/master/GEODATASOURCE-COUNTRY-BORDERS.CSV")
borders <- read_csv(borders_url) %>% clean_names()
View(borders)
covid19 <- getDat(date_str) %>% clean_coviddat()
View(covid19)
attr_vals <- covid19$total_confirmed
var_attr <- var(attr_vals)
var_attr
## HAND CALCULATION
n <- length(attr_vals)
mean_attr <- mean(attr_vals)
s2_attr <- (1 / (n - 1)) * (attr_vals - mean_attr)^2
s2_attr
s2_attr <- (1 / (n - 1)) * sum(attr_vals - mean_attr)^2
s2_attr
s2_attr <- (1 / (n - 1)) * sum((attr_vals - mean_attr)^2)
s2_attr
var_attr
sum(connect_matrx)
sum_weights <- sum(connect_matrx)
countries
connect_matrx["China", "Pakistan"]
connect_matrx["Pakistan", "China"]
connect_matrx["Yemen", "China"]
View(covid19)
borders_countries <- tolower(unique(borders$country_name))
covid19_countries <- covid19$country_region
setdiff(borders_countries, covid19_countries)
sort(setdiff(borders_countries, covid19_countries))
# aland islands: not in covid19
# american samoa: not in covid19
# anguilla: not in covid19
# antarctica: not in covid19
# aruba: not in covid19
# bermuda: not in covid19
# bolivia (plurinational state of): bolivia in covid19
borders$country_name[tolower(borders$country_name) == "bolivia (plurinational state of)"] <- "bolivia"
# bonaire, sint eustatius and saba: not in covid19
# bouvet island: not in covid19
# british indian ocean territory: not in covid19
# brunei darussalam: brunei in covid19
borders$country_name[tolower(borders$country_name) == "brunei darussalam"] <- "brunei"
# cayman islands: not in covid19
# christmas island: not in covid19
# cocos (keeling) islands: part of Australia, remove from borders data
borders <- borders[!(borders$country_name == "cocos (keeling) islands")]
# cayman islands: not in covid19
# christmas island: not in covid19
# cocos (keeling) islands: part of Australia, remove from borders data
borders <- borders[!(borders$country_name == "cocos (keeling) islands"),]
View(borders)
# cayman islands: not in covid19
# christmas island: not in covid19
# cocos (keeling) islands: part of Australia, remove from borders data
borders <- borders[-(borders$country_name == "cocos (keeling) islands"),]
