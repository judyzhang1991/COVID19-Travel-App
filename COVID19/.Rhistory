deaths_geo <- left_join(map_dat, deaths_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region))
nas = confirmed_geo %>% filter(cases == NA)
nas = confirmed_geo %>% filter(is.na(cases) == TRUE)
View(nas)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
View(map_dat)
start_day = as.Date(confirmed_dat$date[1], "%m-%d-%y")
end_day = as.Date(confirmed_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region")
View(confirmed_geo)
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region, geom))
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region")
View(confirmed_geo)
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region, geom))
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region))
View(confirmed_geo)
View(map_dat)
View(confirmed_dat)
unique(confirmed_dat$country_region)
confirmed_geo <- data.frame(left_join(map_dat, confirmed_dat, by = "country_region"))
View(confirmed_geo)
confirmed_geo <- data.frame(left_join(map_dat, confirmed_dat, by = "country_region")) %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region))
View(confirmed_geo)
confirmed_geo <- data.frame(left_join(map_dat, confirmed_dat, by = "country_region")) %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region, geom))
confirmed_geo <- data.frame(left_join(map_dat, confirmed_dat, by = "country_region"))
str(confirmed_geo)
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region") %>% data.frame()
str(confirmed_geo)
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region") %>% tibble()
str(confirmed_geo)
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region))
confirmed_geo <- st_join(map_dat, confirmed_dat, by = "country_region")
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
# st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
mutate(
country_region = tolower(ID)
)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
anti_join(confirmed_geo, map_dat, by = "geom")
anti_join(map_dat, confirmed_dat, by = "country_region")
test = data.frame(anti_join(map_dat, confirmed_dat, by = "country_region"))
View(test)
library(shiny)
library(maps)
library(tidyverse)
library(janitor)
library(sf)
# Source helper functions -----
source("helpers.R")
# Load data ----
### COVID 19 DATA ###
## The data sets are pulled from Johns Hopkins University
## CSSE COVID19 github repository
##
## File Name: time_series_covid19_confirmed_global.csv
## File Name:  time_series_covid19_deaths_global.csv
## File Name:  time_series_covid19_recovered_global.csv
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
recovered_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
clean_coviddat()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_coviddat()
### MAP DATA ###
## The data sets are pulled package {maps}
##
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
## Compare country names in the COVID19 datasets and the map dataset
#diff <- data.frame(unique(confirmed_dat[!confirmed_dat$country_region%in%map_dat$country_region,]$country_region))
#map_country <- data.frame(map_dat$country_region)
### 20 unmatched countries in COVID19 dataset that are NOT in the map dataset
#1. COVID 19: antigua and barbuda
## Map: antigua; barbuda
map_dat$country_region[tolower(map_dat$country_region) == "antigua"] <- "antigua and barbuda"
map_dat$country_region[tolower(map_dat$country_region) == "barbuda"] <- "antigua and barbuda"
##2. COVID19: burma
## Map: myanmar
map_dat$country_region[tolower(map_dat$country_region) == "myanmar"] <- "burma"
#3. COVID19: cabo verde
## Map: cape verde
map_dat$country_region[tolower(map_dat$country_region) == "cape verde"] <- "cabo verde"
#4. COVID19: congo (brazzaville)
## Map: republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "republic of congo"] <- "congo (brazzaville)"
#5. COVID19: congo (kinshasa)
## Map: democratic republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "democratic republic of congo"] <- "congo (kinshasa)"
#6. COVID19: cote d'ivoire
## Map: ivory coast
map_dat$country_region[tolower(map_dat$country_region) == "ivory coast"] <- "cote d'ivoire"
#7. COVID19: czechia
# Map: czech republic
map_dat$country_region[tolower(map_dat$country_region) == "czech republic"] <- "czechia"
#8. COVID19: diamond princess
# Map: NONE
# Not going to be mapped as it is not a country
#9. COVID19: eswatini
# Map: swaziland
map_dat$country_region[tolower(map_dat$country_region) == "swaziland"] <- "eswatini"
#10. COVID19: holy see
# Map: No Match
#11. COVID19: korea, south
## Map: south korea
map_dat$country_region[tolower(map_dat$country_region) == "south korea"] <- "korea, south"
#12. COVID19: ms zaandam
## Map: NONE
# Not going to be mapped as it is not a country
#13. COVID19: north macedonia
## Map: macedonia
map_dat$country_region[tolower(map_dat$country_region) == "macedonia"] <- "north macedonia"
#14. COVID19: saint kitts and nevis
## Map: saint kitts; nevis
map_dat$country_region[tolower(map_dat$country_region) == "saint kitts"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "nevis"] <- "saint kitts and nevis"
#15. COVID19: saint vincent and the grenadines
## Map: saint vincent; grenadines
map_dat$country_region[tolower(map_dat$country_region) == "saint vincent"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "grenadines"] <- "saint vincent and the grenadines"
#16. COVID19: taiwan*
## Map: taiwan
map_dat$country_region[tolower(map_dat$country_region) == "taiwan"] <- "taiwan*"
#17. COVID19: trinidad and tobago
## Map: trinidad; tobago
map_dat$country_region[tolower(map_dat$country_region) == "trinidad"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "tobago"] <- "trinidad and tobago"
#18. COVID19: united kingdom
## Map: uk
map_dat$country_region[tolower(map_dat$country_region) == "uk"] <- "united kingdom"
#19. COVID19: us
## Map: usa
map_dat$country_region[tolower(map_dat$country_region) == "usa"] <- "us"
#20. COVID19: west bank and gaza (no palestine in the dataset)
## Map: palestine
map_dat$country_region[tolower(map_dat$country_region) == "palestine"] <- "west bank and gaza"
test = data.frame(anti_join(map_dat, confirmed_dat, by = "country_region"))
View(test)
start_day = as.Date(confirmed_dat$date[1], "%m-%d-%y")
end_day = as.Date(confirmed_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
confirmed_geo <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region))
View(confirmed_geo)
View(confirmed_geo)
test2 = left_join(confirmed_geo, map_dat, by = "country_region")
View(test2)
confirmed <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(ID, country_region))
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region")
View(deaths_dat)
View(confirmed_geo)
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region") %>%
select(country_region, date, cases, categ, geom.y)
View(confirmed_geo)
View(confirmed_dat)
runApp()
runApp()
runApp()
runApp()
View(test)
runApp()
View(confirmed_geo)
View(confirmed_geo)
## STAT302 ##
## Final Project ##
## Jingyang Zhang ##
## May 20th, 2020 ##
## app.R ##
# Load packages ----
library(shiny)
library(maps)
library(tidyverse)
library(janitor)
library(sf)
# Source helper functions -----
source("helpers.R")
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
recovered_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
clean_coviddat()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_coviddat()
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
map_dat$country_region[tolower(map_dat$country_region) == "antigua"] <- "antigua and barbuda"
map_dat$country_region[tolower(map_dat$country_region) == "barbuda"] <- "antigua and barbuda"
View(map_dat)
##2. COVID19: burma
## Map: myanmar
map_dat$country_region[tolower(map_dat$country_region) == "myanmar"] <- "burma"
#3. COVID19: cabo verde
## Map: cape verde
map_dat$country_region[tolower(map_dat$country_region) == "cape verde"] <- "cabo verde"
#4. COVID19: congo (brazzaville)
## Map: republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "republic of congo"] <- "congo (brazzaville)"
View(map_dat)
map_dat$country_region[tolower(map_dat$country_region) == "democratic republic of congo"] <- "congo (kinshasa)"
#6. COVID19: cote d'ivoire
## Map: ivory coast
map_dat$country_region[tolower(map_dat$country_region) == "ivory coast"] <- "cote d'ivoire"
#7. COVID19: czechia
# Map: czech republic
map_dat$country_region[tolower(map_dat$country_region) == "czech republic"] <- "czechia"
#9. COVID19: eswatini
# Map: swaziland
map_dat$country_region[tolower(map_dat$country_region) == "swaziland"] <- "eswatini"
#11. COVID19: korea, south
## Map: south korea
map_dat$country_region[tolower(map_dat$country_region) == "south korea"] <- "korea, south"
#13. COVID19: north macedonia
## Map: macedonia
map_dat$country_region[tolower(map_dat$country_region) == "macedonia"] <- "north macedonia"
map_dat$country_region[tolower(map_dat$country_region) == "saint kitts"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "nevis"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "saint vincent"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "grenadines"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "taiwan"] <- "taiwan*"
map_dat$country_region[tolower(map_dat$country_region) == "trinidad"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "tobago"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "uk"] <- "united kingdom"
map_dat$country_region[tolower(map_dat$country_region) == "usa"] <- "us"
map_dat$country_region[tolower(map_dat$country_region) == "palestine"] <- "west bank and gaza"
View(map_dat)
map_dat <- map_dat %>% select(country_region, geom)
start_day = as.Date(confirmed_dat$date[1], "%m-%d-%y")
end_day = as.Date(confirmed_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
confirmed <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
View(confirmed_dat)
View(confirmed)
View(map_dat)
View(map_dat)
map_dat$country_region[tolower(map_dat$country_region) == "democratic republic of congo"]
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
View(map_dat)
runApp()
runApp()
library(shiny)
library(maps)
library(tidyverse)
library(janitor)
library(sf)
# Source helper functions -----
source("helpers.R")
# Load data ----
### COVID 19 DATA ###
## The data sets are pulled from Johns Hopkins University
## CSSE COVID19 github repository
##
## File Name: time_series_covid19_confirmed_global.csv
## File Name:  time_series_covid19_deaths_global.csv
## File Name:  time_series_covid19_recovered_global.csv
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
recovered_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
clean_coviddat()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_coviddat()
### MAP DATA ###
## The data sets are pulled package {maps}
##
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
## Compare country names in the COVID19 datasets and the map dataset
#diff <- data.frame(unique(confirmed_dat[!confirmed_dat$country_region%in%map_dat$country_region,]$country_region))
#map_country <- data.frame(map_dat$country_region)
### 20 unmatched countries in COVID19 dataset that are NOT in the map dataset
#1. COVID 19: antigua and barbuda
## Map: antigua; barbuda
map_dat$country_region[tolower(map_dat$country_region) == "antigua"] <- "antigua and barbuda"
map_dat$country_region[tolower(map_dat$country_region) == "barbuda"] <- "antigua and barbuda"
##2. COVID19: burma
## Map: myanmar
map_dat$country_region[tolower(map_dat$country_region) == "myanmar"] <- "burma"
#3. COVID19: cabo verde
## Map: cape verde
map_dat$country_region[tolower(map_dat$country_region) == "cape verde"] <- "cabo verde"
#4. COVID19: congo (brazzaville)
## Map: republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "republic of congo"] <- "congo (brazzaville)"
#5. COVID19: congo (kinshasa)
## Map: democratic republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "	democratic republic of the congo"] <- "congo (kinshasa)"
#6. COVID19: cote d'ivoire
## Map: ivory coast
map_dat$country_region[tolower(map_dat$country_region) == "ivory coast"] <- "cote d'ivoire"
#7. COVID19: czechia
# Map: czech republic
map_dat$country_region[tolower(map_dat$country_region) == "czech republic"] <- "czechia"
#8. COVID19: diamond princess
# Map: NONE
# Not going to be mapped as it is not a country
#9. COVID19: eswatini
# Map: swaziland
map_dat$country_region[tolower(map_dat$country_region) == "swaziland"] <- "eswatini"
#10. COVID19: holy see
# Map: No Match
#11. COVID19: korea, south
## Map: south korea
map_dat$country_region[tolower(map_dat$country_region) == "south korea"] <- "korea, south"
#12. COVID19: ms zaandam
## Map: NONE
# Not going to be mapped as it is not a country
#13. COVID19: north macedonia
## Map: macedonia
map_dat$country_region[tolower(map_dat$country_region) == "macedonia"] <- "north macedonia"
#14. COVID19: saint kitts and nevis
## Map: saint kitts; nevis
map_dat$country_region[tolower(map_dat$country_region) == "saint kitts"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "nevis"] <- "saint kitts and nevis"
#15. COVID19: saint vincent and the grenadines
## Map: saint vincent; grenadines
map_dat$country_region[tolower(map_dat$country_region) == "saint vincent"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "grenadines"] <- "saint vincent and the grenadines"
#16. COVID19: taiwan*
## Map: taiwan
map_dat$country_region[tolower(map_dat$country_region) == "taiwan"] <- "taiwan*"
#17. COVID19: trinidad and tobago
## Map: trinidad; tobago
map_dat$country_region[tolower(map_dat$country_region) == "trinidad"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "tobago"] <- "trinidad and tobago"
#18. COVID19: united kingdom
## Map: uk
map_dat$country_region[tolower(map_dat$country_region) == "uk"] <- "united kingdom"
#19. COVID19: us
## Map: usa
map_dat$country_region[tolower(map_dat$country_region) == "usa"] <- "us"
#20. COVID19: west bank and gaza (no palestine in the dataset)
## Map: palestine
map_dat$country_region[tolower(map_dat$country_region) == "palestine"] <- "west bank and gaza"
map_dat <- map_dat %>% select(country_region, geom)
## Joing COVID19 datasets and map dataset
start_day = as.Date(confirmed_dat$date[1], "%m-%d-%y")
end_day = as.Date(confirmed_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
confirmed <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
#no_coviddat <- anti_join(map_dat, confirmed_dat, by = "country_region")
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region") %>%
select(country_region, date, cases, categ, geom.y)
start_day = as.Date(recovered_dat$date[1], "%m-%d-%y")
end_day = as.Date(recovered_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
recovered <- left_join(map_dat, recovered_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
recovered_geo <- left_join(recovered, map_dat, by = "country_region") %>%
select(country_region, date, cases, categ, geom.y)
deaths <- left_join(map_dat, deaths_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
deaths_geo <- left_join(deaths, map_dat, by = "country_region") %>%
select(country_region, date, cases, categ, geom.y)
View(confirmed_geo)
runApp()
no_coviddat <- anti_join(map_dat, confirmed_dat, by = "country_region")
View(no_coviddat)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
View(map_dat)
map_dat[map_dat$country_region=="denmark",]
View(confirmed_geo)
View(confirmed_dat)
shiny::runApp()
runApp()
runApp()
# Load packages ----
library(tidyverse)
install.packages("airportr")
library(airportr)
### AIRPORT DATA ###
## The dataset is pulled from the R package {airpotr}
##
airport_lookup("YVR", output_type = "country")
### AIRPORT DATA ###
## The dataset is pulled from the R package {airpotr}
##
airport_lookup("YVR", output_type = "IATA")
### AIRPORT DATA ###
## The dataset is downloaded from https://ourairports.com/
## Filename: airports.csv
airports <- read_csv("data/airports.csv")
library(janitor)
### AIRPORT DATA ###
## The dataset is downloaded from https://ourairports.com/
## Filename: airports.csv
airports <- read_csv("data/airports.csv") %>%
clean_names()
### COUNTRY DATA ###
## The dataset is downloaded from https://ourairports.com/
## Filename: countries.csv
countries <- read_csv("data/countries.csv") %>%
clean_names()
shiny::runApp()
ggplot(plot_dat) +
geom_sf(aes(fill = categ,
geometry = geom.y),
color = "white",
show.legend = "polygon") +
scale_fill_manual(name = legend_title,
values = color,
na.value = "#F9BC8F") +
theme_minimal() +
labs(caption = "Data Repository provided by Johns Hopkins CSSE.") +
theme(
### Plot ###
plot.background = element_rect(fill = "#ffffff",
color = NA),
### Panel ###
panel.background = element_rect(fill = "#ffffff",
color = NA),
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.position = "bottom",
legend.background = element_rect(fill = "#ffffff",
color = NA),
### Text ###
text = element_text(color = "#22211d"),
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
