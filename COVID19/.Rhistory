ggplot(top_countries, aes(x = cases, y = reorder(country_region, cases))) +
geom_bar(stat = "identity")
ggplot(top_countries, aes(x = cases, y = reorder(country_region, cases))) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(top_countries, aes(x = reorder(country_region, cases)), y = cases) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(top_countries, aes(x = reorder(country_region, cases), y = cases)) +
geom_bar(stat = "identity") +
coord_flip()
country = "korea, south"
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
View(map_dat)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
View(map_dat)
library(shiny)
library(maps)
library(tidyverse)
library(janitor)
library(sf)
# Source helper functions -----
source("helpers.R")
# Load data ----
### COVID 19 DATA ###
## The datasets are pulled from Johns Hopkins University
## CSSE COVID19 github repository
##
## File Name: time_series_covid19_confirmed_global.csv
## File Name:  time_series_covid19_deaths_global.csv
## File Name:  time_series_covid19_recovered_global.csv
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
recovered_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
clean_coviddat()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_coviddat()
### MAP DATA ###
## The dataset is pulled from the R package {maps}
##
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
## Compare country names in the COVID19 datasets and the map dataset
#diff <- data.frame(unique(confirmed_dat[!confirmed_dat$country_region%in%map_dat$country_region,]$country_region))
#map_country <- data.frame(map_dat$country_region)
### 20 unmatched countries in COVID19 dataset that are NOT in the map dataset
#1. COVID 19: antigua and barbuda
## Map: antigua; barbuda
map_dat$country_region[tolower(map_dat$country_region) == "antigua"] <- "antigua and barbuda"
map_dat$country_region[tolower(map_dat$country_region) == "barbuda"] <- "antigua and barbuda"
##2. COVID19: burma
## Map: myanmar
map_dat$country_region[tolower(map_dat$country_region) == "myanmar"] <- "burma"
#3. COVID19: cabo verde
## Map: cape verde
map_dat$country_region[tolower(map_dat$country_region) == "cape verde"] <- "cabo verde"
#4. COVID19: congo (brazzaville)
## Map: republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "republic of congo"] <- "congo (brazzaville)"
#5. COVID19: congo (kinshasa)
## Map: democratic republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "democratic republic of the congo"] <- "congo (kinshasa)"
#6. COVID19: cote d'ivoire
## Map: ivory coast
map_dat$country_region[tolower(map_dat$country_region) == "ivory coast"] <- "cote d'ivoire"
#7. COVID19: czechia
# Map: czech republic
map_dat$country_region[tolower(map_dat$country_region) == "czech republic"] <- "czechia"
#8. COVID19: diamond princess
# Map: NONE
# Not going to be mapped as it is not a country
#9. COVID19: eswatini
# Map: swaziland
map_dat$country_region[tolower(map_dat$country_region) == "swaziland"] <- "eswatini"
#10. COVID19: holy see
# Map: No Match
#11. COVID19: korea, south
## Map: south korea
map_dat$country_region[tolower(map_dat$country_region) == "south korea"] <- "korea, south"
#12. COVID19: ms zaandam
## Map: NONE
# Not going to be mapped as it is not a country
#13. COVID19: north macedonia
## Map: macedonia
map_dat$country_region[tolower(map_dat$country_region) == "macedonia"] <- "north macedonia"
#14. COVID19: saint kitts and nevis
## Map: saint kitts; nevis
map_dat$country_region[tolower(map_dat$country_region) == "saint kitts"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "nevis"] <- "saint kitts and nevis"
#15. COVID19: saint vincent and the grenadines
## Map: saint vincent; grenadines
map_dat$country_region[tolower(map_dat$country_region) == "saint vincent"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "grenadines"] <- "saint vincent and the grenadines"
#16. COVID19: taiwan*
## Map: taiwan
map_dat$country_region[tolower(map_dat$country_region) == "taiwan"] <- "taiwan*"
#17. COVID19: trinidad and tobago
## Map: trinidad; tobago
map_dat$country_region[tolower(map_dat$country_region) == "trinidad"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "tobago"] <- "trinidad and tobago"
#18. COVID19: united kingdom
## Map: uk
map_dat$country_region[tolower(map_dat$country_region) == "uk"] <- "united kingdom"
#19. COVID19: us
## Map: usa
map_dat$country_region[tolower(map_dat$country_region) == "usa"] <- "us"
#20. COVID19: west bank and gaza (no palestine in the dataset)
## Map: palestine
map_dat$country_region[tolower(map_dat$country_region) == "palestine"] <- "west bank and gaza"
map_dat <- map_dat %>% select(country_region, geom)
## Joing COVID19 datasets and map dataset
start_day = as.Date(confirmed_dat$date[1], "%m-%d-%y")
end_day = as.Date(confirmed_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
#no_coviddat <- anti_join(map_dat, confirmed_dat, by = "country_region")
confirmed <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
start_day = as.Date(recovered_dat$date[1], "%m-%d-%y")
end_day = as.Date(recovered_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
recovered <- left_join(map_dat, recovered_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
recovered_geo <- left_join(recovered, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
deaths <- left_join(map_dat, deaths_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
deaths_geo <- left_join(deaths, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
View(map_dat)
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
library(shiny)
library(maps)
library(tidyverse)
library(janitor)
library(sf)
# Source helper functions -----
source("helpers.R")
# Load data ----
### COVID 19 DATA ###
## The datasets are pulled from Johns Hopkins University
## CSSE COVID19 github repository
##
## File Name: time_series_covid19_confirmed_global.csv
## File Name:  time_series_covid19_deaths_global.csv
## File Name:  time_series_covid19_recovered_global.csv
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
recovered_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
clean_coviddat()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_coviddat()
### MAP DATA ###
## The dataset is pulled from the R package {maps}
##
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
## Compare country names in the COVID19 datasets and the map dataset
#diff <- data.frame(unique(confirmed_dat[!confirmed_dat$country_region%in%map_dat$country_region,]$country_region))
#map_country <- data.frame(map_dat$country_region)
### 20 unmatched countries in COVID19 dataset that are NOT in the map dataset
#1. COVID 19: antigua and barbuda
## Map: antigua; barbuda
map_dat$country_region[tolower(map_dat$country_region) == "antigua"] <- "antigua and barbuda"
map_dat$country_region[tolower(map_dat$country_region) == "barbuda"] <- "antigua and barbuda"
##2. COVID19: burma
## Map: myanmar
map_dat$country_region[tolower(map_dat$country_region) == "myanmar"] <- "burma"
#3. COVID19: cabo verde
## Map: cape verde
map_dat$country_region[tolower(map_dat$country_region) == "cape verde"] <- "cabo verde"
#4. COVID19: congo (brazzaville)
## Map: republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "republic of congo"] <- "congo (brazzaville)"
#5. COVID19: congo (kinshasa)
## Map: democratic republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "democratic republic of the congo"] <- "congo (kinshasa)"
#6. COVID19: cote d'ivoire
## Map: ivory coast
map_dat$country_region[tolower(map_dat$country_region) == "ivory coast"] <- "cote d'ivoire"
#7. COVID19: czechia
# Map: czech republic
map_dat$country_region[tolower(map_dat$country_region) == "czech republic"] <- "czechia"
#8. COVID19: diamond princess
# Map: NONE
# Not going to be mapped as it is not a country
#9. COVID19: eswatini
# Map: swaziland
map_dat$country_region[tolower(map_dat$country_region) == "swaziland"] <- "eswatini"
#10. COVID19: holy see
# Map: No Match
#11. COVID19: korea, south
## Map: south korea
map_dat$country_region[tolower(map_dat$country_region) == "south korea"] <- "korea, south"
#12. COVID19: ms zaandam
## Map: NONE
# Not going to be mapped as it is not a country
#13. COVID19: north macedonia
## Map: macedonia
map_dat$country_region[tolower(map_dat$country_region) == "macedonia"] <- "north macedonia"
#14. COVID19: saint kitts and nevis
## Map: saint kitts; nevis
map_dat$country_region[tolower(map_dat$country_region) == "saint kitts"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "nevis"] <- "saint kitts and nevis"
#15. COVID19: saint vincent and the grenadines
## Map: saint vincent; grenadines
map_dat$country_region[tolower(map_dat$country_region) == "saint vincent"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "grenadines"] <- "saint vincent and the grenadines"
#16. COVID19: taiwan*
## Map: taiwan
map_dat$country_region[tolower(map_dat$country_region) == "taiwan"] <- "taiwan*"
#17. COVID19: trinidad and tobago
## Map: trinidad; tobago
map_dat$country_region[tolower(map_dat$country_region) == "trinidad"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "tobago"] <- "trinidad and tobago"
#18. COVID19: united kingdom
## Map: uk
map_dat$country_region[tolower(map_dat$country_region) == "uk"] <- "united kingdom"
#19. COVID19: us
## Map: usa
map_dat$country_region[tolower(map_dat$country_region) == "usa"] <- "us"
#20. COVID19: west bank and gaza (no palestine in the dataset)
## Map: palestine
map_dat$country_region[tolower(map_dat$country_region) == "palestine"] <- "west bank and gaza"
## Joing COVID19 datasets and map dataset
start_day = as.Date(confirmed_dat$date[1], "%m-%d-%y")
end_day = as.Date(confirmed_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
#no_coviddat <- anti_join(map_dat, confirmed_dat, by = "country_region")
confirmed <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
start_day = as.Date(recovered_dat$date[1], "%m-%d-%y")
end_day = as.Date(recovered_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
recovered <- left_join(map_dat, recovered_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
recovered_geo <- left_join(recovered, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
deaths <- left_join(map_dat, deaths_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region))
deaths_geo <- left_join(deaths, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
View(map_dat)
confirmed <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region, ID))
View(confirmed)
runApp()
library(shiny)
library(maps)
library(tidyverse)
library(janitor)
library(sf)
# Source helper functions -----
source("helpers.R")
# Load data ----
### COVID 19 DATA ###
## The datasets are pulled from Johns Hopkins University
## CSSE COVID19 github repository
##
## File Name: time_series_covid19_confirmed_global.csv
## File Name:  time_series_covid19_deaths_global.csv
## File Name:  time_series_covid19_recovered_global.csv
# Confirmed cases are aggregated by country
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_coviddat()
recovered_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
clean_coviddat()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_coviddat()
### MAP DATA ###
## The dataset is pulled from the R package {maps}
##
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
country_region = tolower(ID)
)
## Compare country names in the COVID19 datasets and the map dataset
#diff <- data.frame(unique(confirmed_dat[!confirmed_dat$country_region%in%map_dat$country_region,]$country_region))
#map_country <- data.frame(map_dat$country_region)
### 20 unmatched countries in COVID19 dataset that are NOT in the map dataset
#1. COVID 19: antigua and barbuda
## Map: antigua; barbuda
map_dat$country_region[tolower(map_dat$country_region) == "antigua"] <- "antigua and barbuda"
map_dat$country_region[tolower(map_dat$country_region) == "barbuda"] <- "antigua and barbuda"
##2. COVID19: burma
## Map: myanmar
map_dat$country_region[tolower(map_dat$country_region) == "myanmar"] <- "burma"
#3. COVID19: cabo verde
## Map: cape verde
map_dat$country_region[tolower(map_dat$country_region) == "cape verde"] <- "cabo verde"
#4. COVID19: congo (brazzaville)
## Map: republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "republic of congo"] <- "congo (brazzaville)"
#5. COVID19: congo (kinshasa)
## Map: democratic republic of congo
map_dat$country_region[tolower(map_dat$country_region) == "democratic republic of the congo"] <- "congo (kinshasa)"
#6. COVID19: cote d'ivoire
## Map: ivory coast
map_dat$country_region[tolower(map_dat$country_region) == "ivory coast"] <- "cote d'ivoire"
#7. COVID19: czechia
# Map: czech republic
map_dat$country_region[tolower(map_dat$country_region) == "czech republic"] <- "czechia"
#8. COVID19: diamond princess
# Map: NONE
# Not going to be mapped as it is not a country
#9. COVID19: eswatini
# Map: swaziland
map_dat$country_region[tolower(map_dat$country_region) == "swaziland"] <- "eswatini"
#10. COVID19: holy see
# Map: No Match
#11. COVID19: korea, south
## Map: south korea
map_dat$country_region[tolower(map_dat$country_region) == "south korea"] <- "korea, south"
#12. COVID19: ms zaandam
## Map: NONE
# Not going to be mapped as it is not a country
#13. COVID19: north macedonia
## Map: macedonia
map_dat$country_region[tolower(map_dat$country_region) == "macedonia"] <- "north macedonia"
#14. COVID19: saint kitts and nevis
## Map: saint kitts; nevis
map_dat$country_region[tolower(map_dat$country_region) == "saint kitts"] <- "saint kitts and nevis"
map_dat$country_region[tolower(map_dat$country_region) == "nevis"] <- "saint kitts and nevis"
#15. COVID19: saint vincent and the grenadines
## Map: saint vincent; grenadines
map_dat$country_region[tolower(map_dat$country_region) == "saint vincent"] <- "saint vincent and the grenadines"
map_dat$country_region[tolower(map_dat$country_region) == "grenadines"] <- "saint vincent and the grenadines"
#16. COVID19: taiwan*
## Map: taiwan
map_dat$country_region[tolower(map_dat$country_region) == "taiwan"] <- "taiwan*"
#17. COVID19: trinidad and tobago
## Map: trinidad; tobago
map_dat$country_region[tolower(map_dat$country_region) == "trinidad"] <- "trinidad and tobago"
map_dat$country_region[tolower(map_dat$country_region) == "tobago"] <- "trinidad and tobago"
#18. COVID19: united kingdom
## Map: uk
map_dat$country_region[tolower(map_dat$country_region) == "uk"] <- "united kingdom"
#19. COVID19: us
## Map: usa
map_dat$country_region[tolower(map_dat$country_region) == "usa"] <- "us"
#20. COVID19: west bank and gaza (no palestine in the dataset)
## Map: palestine
map_dat$country_region[tolower(map_dat$country_region) == "palestine"] <- "west bank and gaza"
start_day = as.Date(confirmed_dat$date[1], "%m-%d-%y")
end_day = as.Date(confirmed_dat$date[nrow(confirmed_dat)], "%m-%d-%y")
confirmed <- left_join(map_dat, confirmed_dat, by = "country_region") %>%
complete(date = seq(start_day, end_day, by = "days"), nesting(country_region, ID))
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region") %>%
select(ID, country_region, date, cases, categ, geom.y)
View(confirmed)
confirmed_geo <- left_join(confirmed, map_dat, by = "country_region")
View(confirmed_dat)
View(confirmed_geo)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(top_countries, aes(x = reorder(ID.x, cases), y = cases)) +
geom_bar(aes(fill = ID.x), stat = "identity") +
geom_text(aes(label = cases), position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("#481568",
"#453781",
"#39558C",
"#2D708E",
"#238A8D",
"#20A386",
"#3CBC75",
"#74D055",
"#B8DE29",
"#FDE725"
)) +
coord_flip() +
labs(title = title_input, x = "Number of Cases", y = "Country") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank()
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(top_countries, aes(x = reorder(ID.x, cases), y = cases)) +
geom_bar(aes(fill = categ),
stat = "identity",
show.legend = FALSE) +
geom_text(aes(label = cases),
position = position_dodge(width = 0.9),
color = "#C39797",
size = 5,
fontface = "bold") +
scale_fill_manual(values = color) +
coord_flip() +
labs(title = title_input, x = "Number of Cases", y = "Country") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank()
)
runApp()
ggplot(top_countries, aes(x = reorder(ID.x, cases), y = cases)) +
geom_bar(aes(fill = categ),
stat = "identity",
show.legend = FALSE) +
geom_text(aes(label = cases),
position = position_dodge(width = 0.8),
color = "#C39797",
size = 5,
fontface = "bold") +
scale_fill_manual(values = color) +
coord_flip() +
labs(title = title_input, x = "Country", y = "Number of Cases") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank()
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(top_countries, aes(x = reorder(ID.x, cases), y = cases)) +
geom_bar(aes(fill = categ),
stat = "identity",
show.legend = FALSE) +
geom_text(aes(label = cases),
position = position_dodge(width = 0.9),
hjust = 1,
color = "#d1c0df",
size = 5,
fontface = "bold") +
scale_fill_manual(values = color) +
coord_flip() +
labs(title = plot_title,
x = "Country",
y = "Number of Cases",
caption = "Only display countries with at least 1 case.") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank(),
plot.title = element_text(face = "bold",
size = 24,
hjust = 0,
vjust = 1),
### Panel ###
panel.grid.major.x = element_blank(),
### Axis ###
axis.text = element_text(face = "bold",
size = 10),
axis.title = element_text(face = "bold",
size = 12)
)
runApp()
runApp()
runApp()
shiny::runApp()
