trans="log",
range=c(1,7),
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
scale_color_viridis_c(option="inferno",
name="Cases",
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_void() +
guides( colour = guide_legend()) +
labs(caption = "Data Repository provided by Johns Hopkins CSSE. Visualization by DataScience+ ") +
theme(
#legend.position = "bottom",
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
ggplot() +
geom_polygon(data = map_dat, aes(x = long,
y = lat,
group = group),
fill = "grey",
alpha = 0.3) +
geom_point(data = confirmed_dat,
aes(x = long,
y = lat,
size = x3_3_20,
color = x3_3_20,
stroke = F,
alpha = 0.7)) +
scale_size_continuous(name="Cases",
trans="log",
range=c(1,7),
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
scale_color_viridis_c(option="inferno",
name="Cases",
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_void() +
guides( colour = guide_legend()) +
labs(caption = "Data Repository provided by Johns Hopkins CSSE. Visualization by DataScience+ ") +
theme(
#legend.position = "bottom",
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
ggplot() +
geom_polygon(data = map_dat, aes(x = long,
y = lat,
group = group),
fill = "grey",
alpha = 0.3) +
geom_point(data = confirmed_dat,
aes(x = long,
y = lat,
size = x3_3_20,
color = x3_3_20,
stroke = F,
alpha = 0.7)) +
scale_size_continuous(name="Cases",
trans="log",
range=c(1,7),
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
scale_color_viridis_c(option="inferno",
name="Cases",
trans="log",
breaks=val_breaks,
labels = c("1-19",
"20-99",
"100-999",
"1,000-49,999",
"50,000+")) +
theme_void() +
guides( colour = guide_legend()) +
labs(caption = "Data Repository provided by Johns Hopkins CSSE. Visualization by DataScience+ ") +
theme(
legend.position = "bottom",
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
View(map_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c_dates <- names(confirmed_dat)
View(confirmed_dat)
c_dates <- names(confirmed_dat)[, -c(1:4)]
c_dates <- names(confirmed_dat[, -c(1:4)])
View(recovered_dat)
c_dates <- names(confirmed_dat[, -c(1:4)])
r_dates <- names(recovered_dat[, -c(1:4)])
d_dates <- names(deaths_dat[, -c(1:4)])
dates <- names(confirmed_dat[, -c(1:4)])
dates <- str_replace(names(confirmed_dat[, -c(1:4)]), "x", "")
min(dates)
max(dates)
as.Date(min(dates)), "%Y-%m-%d")
as.Date("1_22_20", "%Y-%m-%d")
lct <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
as.Date("1_22_20", "%Y-%m-%d")
View(confirmed_dat)
Sys.Date
as.Date(as.POSIXlt(Sys.time()))
dates <- seq(as.Date("2020-1-22"), as.Date(as.POSIXlt(Sys.time())), by = "days")
input_dates <- seq(as.Date("2020-1-22"), as.Date(as.POSIXlt(Sys.time())), by = "days")
dat_dates <- str_replace(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "-")
dat_dates <- str_replace_all(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "-")
dat_Dates[,-1]
dat_dates <- str_replace_all(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "-")
dat_dates[128]
dat_dates[127]
dat_dates <- as.Date(str_replace_all(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "-"))
dat_dates <- str_replace_all(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "/")
dat_dates <- as.Date(str_replace_all(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "/"))
dat_dates <- as.Date(str_replace_all(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "/"), "%m%d%Y")
dat_dates <- str_replace_all(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "_", "/")
min(dat_dates)
runApp()
typeof(dat_dates[1])
as.Date(dat_dates[1], "%m/%d/%Y")
as.Date(dat_dates[1], "%m/%d/%y")
dat_dates <- as.Date(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "%m_%d_%y")
runApp()
library(lubridate)
library(glue)
dat_dates <- as.Date(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "%m_%d_%y")
# Remove leading zeros to save space when displaying on the slider
dat_dates <- glue("{month(dat_dates)}/{day(dat_dates)/{year(dat_dates)}}")
dat_dates
dt <- "1998-09-02"
glue("{year(dt)}, {month(dt)}, {day(dt)}")
# Remove leading zeros to save space when displaying on the slider
dat_dates <- sapply(glue("{month(dat_dates)}/{day(dat_dates)/{year(dat_dates)}}"))
# Remove leading zeros to save space when displaying on the slider
dat_dates <- sapply(glue, "{month(dat_dates)}/{day(dat_dates)/{year(dat_dates)}}")
dat_dates <- gsub(" 0", "", format(as.Date(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "%m_%d_%y"), "%m/%d/%y"))
dat_dates <- gsub("0", "", format(as.Date(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "%m_%d_%y"), "%m/%d/%y"))
dat_dates
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
typeof(dat_dates[1])
runApp()
runApp()
shinyApp(ui = ui, server=server)
ui <- fluidPage(
tags$style(type = "text/css", "
.irs-bar {width: 100%; height: 25px; background: black; border-top: 1px solid black; border-bottom: 1px solid black;}
.irs-bar-edge {background: black; border: 1px solid black; height: 25px; border-radius: 0px; width: 20px;}
.irs-line {border: 1px solid black; height: 25px; border-radius: 0px;}
.irs-grid-text {font-family: 'arial'; color: white; bottom: 17px; z-index: 1;}
.irs-grid-pol {display: none;}
.irs-max {font-family: 'arial'; color: black;}
.irs-min {font-family: 'arial'; color: black;}
.irs-single {color:black; background:#6666ff;}
.irs-slider {width: 30px; height: 30px; top: 22px;}
"),
uiOutput("testSlider")
server <- function(input, output, session){
output$testSlider <- renderUI({
sliderInput(inputId="test", label=NULL, min=1, max=10, value=5, step = 1, width='100%')
})
}
shinyApp(ui = ui, server=server)
server <- function(input, output, session){
output$testSlider <- renderUI({
sliderInput(inputId="test", label=NULL, min=1, max=10, value=5, step = 1, width='100%')
})
}
shinyApp(ui = ui, server=server)
ui <- fluidPage(
tags$style(type = "text/css", "
.irs-bar {width: 100%; height: 25px; background: black; border-top: 1px solid black; border-bottom: 1px solid black;}
.irs-bar-edge {background: black; border: 1px solid black; height: 25px; border-radius: 0px; width: 20px;}
.irs-line {border: 1px solid black; height: 25px; border-radius: 0px;}
.irs-grid-text {font-family: 'arial'; color: white; bottom: 17px; z-index: 1;}
.irs-grid-pol {display: none;}
.irs-max {font-family: 'arial'; color: black;}
.irs-min {font-family: 'arial'; color: black;}
.irs-single {color:black; background:#6666ff;}
.irs-slider {width: 30px; height: 30px; top: 22px;}
"),
uiOutput("testSlider")
)
shinyApp(ui = ui, server=server)
shinyApp(ui = ui, server=server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
string = "2020-01-22"
test = string[1]
test
test = substr(string, 5, length(string))
test = substr(string, start = 6, end = length(string))
test = substr(string, start = 6, stop = length(string))
string = "2020-01-22"
test = substr(string, start = 6, stop = length(string))
substr(string, 1, 3)
substr(string, 6, length(string))
length(string)
len(string)
substr(string, 6, nchar(string))
runApp()
runApp()
library(glue)
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_names()
View(confirmed_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test = "2020, 1, 22"
str_split(test, " ,")
str_split(test, ", ")
a = str_split(test, ", ")
a[1]
a[1][1]
a[1:4]
a = "01/01/1900 00:00:00"
str_split(a, " ")
str_split(a, " ")[1]
str_split(a, " ")[2]
str_split(a, " ")[[1]][2]
test = "2020, 1, 22"
str_split(test, ", ", simplify = TRUE)
str_split(test, ", ", simplify = TRUE)[,1]
str_split(test, ", ", simplify = TRUE)[,2]
str_split(test, ", ", simplify = TRUE)[,3]
y = "2020"
substr(y, 3, 4)
y = "2021"
substr(y, 3, 4)
View(confirmed_dat)
View(confirmed_dat)
runApp()
runApp()
test = "x1_22_20"
confirmed_dat$test
confirmed_dat[[test]]
runApp()
runApp()
runApp()
runApp()
View(confirmed_dat)
View(confirmed_dat)
View(confirmed_dat)
View(confirmed_dat)
length(dat)
length(confirmed_dat)
confirmed_dat[1]
confirmed_dat[2]
agg_rows <- function(dat){
for(i in 5:length(dat)){
aggregate(dat[i], by = list(country_region = dat[2]), FUN = sum)
}
}
agg_rows(confirmed_dat)
aggregate(confirmed_dat[5], by = list(country_region = confirmed_dat[2]), FUN = sum)
length(confirmed_dat[5])
## Aggregate by country
confirmed_dat <- confirmed_dat %>%
group_by(country_region) %>%
summarise_all(funs(sum))
confirmed_dat <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(x1_22_2020), funs(sum))
View(confirmed_dat)
## Aggregate by country
confirmed_dat <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(x1_22_20), funs(sum))
View(confirmed_dat)
## Aggregate by country
confirmed_dat <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(confirmed_dat[5]), funs(sum))
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_names()
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(confirmed_dat[5]), funs(sum))
confirmed_dat[5]
typeof(confirmed_dat[5])
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_if(is.numeric, sum, na.rm = TRUE)
View(confirmed_agg)
names(confirmed_agg)
unique(confiremd_agg$country_region)
unique(confirmed_agg$country_region)
runApp()
confirmed_dat[, sum(5:length(confirmed_dat)), by = country_region]
confirmed_agg <- aggregate(confirmed_dat[, 5:length(confirmed_dat)] ~ country_region, data = confirmed_dat, sum)
confirmed_agg <- aggregate(confirmed_dat[, 5] ~ country_region, data = confirmed_dat, sum)
confirmed_agg <- aggregate(x1_22_20 ~ country_region, data = confirmed_dat, sum)
View(confirmed_agg)
recovered_agg <- recovered_dat %>%
group_by(country_region) %>%
summarise_at(5:length(recovered_dat), sum)
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(5:length(confirmed_dat), sum)
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(5:6, sum)
View(confirmed_agg)
typeof(length(confirmed_dat))
is.numeric(length(confirmed_dat))
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(5:as.numeric(length(confirmed_dat)), sum)
View(confirmed_agg)
View(confirmed_dat)
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_each(funs(sum), -c(province_state, country_region, lat, long))
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_each(funs(sum), -c(province_state, country_region, lat, long))
# Load packages ----
library(shiny)
library(tidyverse)
library(maps)
library(janitor)
library(readr)
library(viridis)
library(lubridate)
library(glue)
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_names()
recovered_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"))%>%
clean_names()
deaths_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
clean_names()
dat_dates <- as.Date(str_replace(names(confirmed_dat[, -c(1:4)]), "x", ""), "%m_%d_%y")
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_each(funs(sum), -c(province_state, country_region, lat, long))
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
select(-c(lat, long)) %>%
group_by(country_region) %>%
summarise_if(is.numeric, sum)
View(confirmed_agg)
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(-province_state, -country_region, -lat, -long), funs(sum(., na.rm = TRUE)))
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(starts_with('x')), sum)
View(confirmed_agg)
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_names()
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(starts_with('x')), sum)
View(confirmed_agg)
confirmed_agg <- confirmed_dat %>%
group_by(country_region)
# Load packages ----
library(shiny)
library(tidyverse)
library(maps)
library(janitor)
library(readr)
library(viridis)
library(lubridate)
library(glue)
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_names()
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
mutate_at(vars(starts_with('x')), sum)
View(confirmed_agg)
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_if(vars(starts_with('x')), sum)
## Aggregate by country
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
summarise_at(vars(starts_with('x')), sum)
View(confirmed_agg)
confirmed_agg <- confirmed_dat %>%
group_by(country_region) %>%
select_all() %>%
summarise_at(vars(starts_with('x')), sum)
View(confirmed_agg)
aggregate(data = confirmed_dat, list(country_region), FUN = sum)
aggregate(data = confirmed_dat, country_region~start_wtih('x'), FUN = sum)
aggregate(data = confirmed_dat, country_region~vars(start_wtih('x')), FUN = sum)
View(confirmed_agg)
View(confirmed_dat)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
)
View(map_dat)
typeof(geocode("China"))
install.packages("ggmap")
typeof(geocode("China"))
library(ggmap)
typeof(geocode("China"))
typeof(geocode("china"))
typeof(geocode("amsterdam"))
geocode("usa", source = 'dsk')
install.packages("CoordinateCleaner")
library(CoordinateCleaner)
test = data("countryref")
force(countryref)
View(countryref)
View(countryref)
country_cent <- read_csv("data/country_centroid_az8.csv")
getwd()
country_cent <- read_csv("data/country_centroids_az8.csv")
View(country_cent)
names(country_cent)
country_cent <- read_csv("data/country_centroids_az8.csv") %>%
clean_names() %>%
select(name_long, longitude, latitude)
View(country_cent)
View(confirmed_agg)
confirmed_geodat <- left_join(confirmed_agg, country_cent, by = c(tolower(country_region) = tolower(name_long)))
confirmed_geodat <- left_join(confirmed_agg,
country_cent,
by = "country_region")
confirmed_dat <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
clean_names() %>%
mutate(
country_region = tolower(country_region)
)
country_cent <- read_csv("data/country_centroids_az8.csv") %>%
clean_names() %>%
select(name_long, longitude, latitude) %>%
mutate(country_region = tolower(name_long))
confirmed_geodat <- left_join(confirmed_agg,
country_cent,
by = "country_region")
View(confirmed_geodat)
names(confirmed_geodat)
