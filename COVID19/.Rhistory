colors = c("#FFFFFF",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#FD8D3C",
"#BD0026"),
na.value = "grey80") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank(),
### Panel ###
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.direction = "horizontal",
legend.position = "bottom"
)
test = covid19_map %>%
filter(date == "2020-4-22")
ggplot(test) +
geom_sf(aes(fill = confirmed_pct,
geometry = geom),
color = "grey25") +
scale_fill_gradientn(name = NULL,
colors = c("#FFFFFF",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#FD8D3C",
"#BD0026"),
na.value = "grey80") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank(),
### Panel ###
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.direction = "horizontal",
legend.position = "bottom"
)
glob_covid19 <- covid19() %>%
clean_names() %>%
mutate(
confirmed_pct = (confirmed / population) * 100,
recovered_pct = (recovered / population) * 100,
death_pct = (deaths / population) * 100
)
glob_map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE) %>%
st_as_sf()
# Merge COVID19 dataset and map dataset
covid19_map <- left_join(glob_covid19, glob_map_dat, by = c("administrative_area_level_1" = "ID"))
test = covid19_map %>%
filter(date == "2020-4-22")
View(test)
glob_covid19 <- covid19() %>%
clean_names() %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = reovered / 100000,
death_rate = deaths / 100000
)
glob_map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE) %>%
st_as_sf()
# Merge COVID19 dataset and map dataset
covid19_map <- left_join(glob_covid19, glob_map_dat, by = c("administrative_area_level_1" = "ID"))
test = covid19_map %>%
filter(date == "2020-4-22")
ggplot(test) +
geom_sf(aes(fill = confirmed_pct,
geometry = geom),
color = "grey25") +
scale_fill_gradientn(name = NULL,
colors = c("#FFFFFF",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#FD8D3C",
"#BD0026"),
na.value = "grey80") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank(),
### Panel ###
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.direction = "horizontal",
legend.position = "bottom"
)
View(test)
glob_covid19 <- covid19() %>%
clean_names() %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = reovered / 100000,
death_rate = deaths / 100000
)
database = "world",
plot = FALSE,
fill = TRUE) %>%
st_as_sf()
# Merge COVID19 dataset and map dataset
covid19_map <- left_join(glob_covid19, glob_map_dat, by = c("administrative_area_level_1" = "ID"))
test = covid19_map %>%
filter(date == "2020-4-22")
View(test)
library(tidyverse)
library(janitor)
library(COVID19)
library(maps)
library(sf)
glob_covid19 <- covid19() %>%
clean_names() %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = reovered / 100000,
death_rate = deaths / 100000
)
# Get global map dataset and covert it to an sf object
glob_map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE) %>%
st_as_sf()
# Merge COVID19 dataset and map dataset
covid19_map <- left_join(glob_covid19, glob_map_dat, by = c("administrative_area_level_1" = "ID"))
glob_map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE) %>%
st_as_sf()
# Merge COVID19 dataset and map dataset
covid19_map <- left_join(glob_covid19, glob_map_dat, by = c("administrative_area_level_1" = "ID"))
glob_covid19 <- covid19() %>%
clean_names() %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = reovered / 100000,
death_rate = deaths / 100000
)
# Get global map dataset and covert it to an sf object
glob_covid19 <- covid19() %>%
clean_names() %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered / 100000,
death_rate = deaths / 100000
)
glob_map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE) %>%
st_as_sf()
# Merge COVID19 dataset and map dataset
covid19_map <- left_join(glob_covid19, glob_map_dat, by = c("administrative_area_level_1" = "ID"))
test = covid19_map %>%
filter(date == "2020-4-22")
ggplot(test) +
geom_sf(aes(fill = confirmed_rate,
geometry = geom),
color = "grey25") +
scale_fill_gradientn(name = NULL,
colors = c("#FFFFFF",
"#FED976",
"#FEB24C",
"#FD8D3C",
"#FD8D3C",
"#BD0026"),
na.value = "grey80") +
theme_minimal() +
theme(
### Plot ###
plot.background = element_blank(),
### Panel ###
panel.grid = element_blank(),
### Axis ###
axis.text = element_blank(),
### Legend ###
legend.direction = "horizontal",
legend.position = "bottom"
)
runApp()
library(shiny)
library(COVID19)
library(janitor)
library(tidyverse)
library(maps)
library(sf)
# Load helper -----
source("helpers.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(COVID19)
library(janitor)
library(tidyverse)
library(maps)
library(sf)
glob_covid19 <- covid19() %>%
clean_names() %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered / 100000,
death_rate = deaths / 100000
)
glob_map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE) %>%
st_as_sf()
covid19_map <- left_join(glob_covid19,
glob_map_dat,
by = c("administrative_area_level_1" = "ID"))
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Global COVID 19 Project"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
position = "right",
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select box for variables
#selectInput("var",
# label = "Select Variable:",
# c("Confirmed Cases" = "confirmed_rate",
#   "Recovered Cases" = "recovered_rate",
#   "Deaths Cases" = "deaths_rate"),
# selected = "confirmed_rate"),
# Input: Slider for the number of bins ----
sliderInput(inputId = "date",
label = "Date:",
min = glob_covid19$date,
max = min(glob_covid19$date),
value = max(glob_covid19$date),
animate = TRUE)
# Input: Radio buttons for fill/legend variables
#radioButtons("choice",
# label = "Select Fill/Legend Variable:",
# c( "General Health" = "genhlth",
#   "Health Coverage" = "hlthplan",
#   "Exercised in Past Month" = "exerany",
#  "Smoked 100 Cigarettes" = "smoke100",
#  "Gender" = "gender",
#  "None" = "none"),
# select = "none")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary
#tabsetPanel(type = "tabs",
#tabPanel("Visualization", plotOutput("map")),
#tabPanel("Summary", verbatimTextOutput("summary1"), verbatimTextOutput("summary2"))
#)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#output$map <- renderPlot({
#args <- switch(input$var,
#   "Confirmed Cases" = list(glob_covid19$confirmed_rate, "darkblue", "% Confirmed"),
#    "Recovered Cases" = list(glob_covid19$recovered_rate, "darkgreen", "% Recovered"),
#  "Deaths Cases" = list(glob_covid19$deaths_rate, "black", "% Deaths"))
#args$start <- input$date[1]
#args$end <- input$date[2]
# })
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
library(tidyverse)
library(sf)
library(COVID19)
# Load data ----
covid19_dat <- covid19()
# Load data ----
covid19_dat <- covid19()
View(covid19_dat)
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf()
View(map_dat)
View(covid19_dat)
## Global COVID19 Data
covid19_dat <- covid19() %>%
select(date,
confirmed,
recovered,
deaths,
administrative_area_level1) %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered /100000,
deaths_rate = deaths / 100000
)
## Global COVID19 Data
covid19_dat <- covid19() %>%
select(date,
confirmed,
recovered,
deaths,
administrative_area_level_1) %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered /100000,
deaths_rate = deaths / 100000
) %>%
rename(administrative_area_level_1 = ID)
## Global COVID19 Data
covid19_dat <- covid19() %>%
select(date,
confirmed,
recovered,
deaths,
administrative_area_level_1) %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered /100000,
deaths_rate = deaths / 100000
) %>%
rename(ID = administrative_area_level_1)
View(covid19_dat)
# Merge COVID19 data and map data
covid19_map_dat <- left_join(covid19_dat, map_dat, by = ID)
View(map_dat)
# Merge COVID19 data and map data
covid19_map_dat <- left_join(covid19_dat, map_dat, by = "ID")
## Global COVID19 Data
covid19_dat <- covid19() %>%
select(id,
date,
confirmed,
recovered,
deaths,
administrative_area_level_1) %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered /100000,
deaths_rate = deaths / 100000
) %>%
rename(ID = factor(administrative_area_level_1))
covid19_dat <- covid19() %>%
select(id,
date,
confirmed,
recovered,
deaths,
administrative_area_level_1) %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered / 100000,
deaths_rate = deaths / 100000,
ID = factor(administrative_area_level_1)
)
View(covid19_dat)
## Global Map Data
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf()
# Merge COVID19 data and map data
covid19_map_dat <- left_join(covid19_dat, map_dat, by = "ID")
## Global Map Data
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf() %>%
mutate(
ID = as.factor(ID)
)
# Merge COVID19 data and map data
covid19_map_dat <- left_join(covid19_dat, map_dat, by = "ID")
## Global COVID19 Data
covid19_dat <- covid19() %>%
select(id,
date,
confirmed,
recovered,
deaths,
administrative_area_level_1) %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered / 100000,
deaths_rate = deaths / 100000,
ID = administrative_area_level_1
)
## Global Map Data
map_dat <- maps::map(
database = "world",
plot = FALSE,
fill = TRUE
) %>%
st_as_sf()
# Merge COVID19 data and map data
covid19_map_dat <- left_join(covid19_dat, map_dat, by = "ID")
runApp()
typeof(covid19_map_dat$date)
as.Date(covid19_map_dat$date)
typeof(covid19_map_dat$date)
test = as.Date(covid19_map_dat$date)
typeof(test)
min(covid19_map_dat$date)
runApp()
length(covid19_map_dat$confirmed_rate)
library(RColorBrewer)
library(RColorBrewer)
min(covid19_map_dat$date)
test = covid19_map_dat %>% filter(date >= "2020-01-22", date <= "2020-3-22")
View(test)
runApp()
runApp()
runApp()
test = covid19_map_dat%>%filter(date=="2020-05-08")
View(test)
covid19_map_dat$confirmed_rate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
## Global COVID19 Data
covid19_dat <- covid19() %>%
select(id,
date,
confirmed,
recovered,
deaths,
administrative_area_level_1) %>%
mutate(
confirmed_rate = confirmed / 100000,
recovered_rate = recovered / 100000,
deaths_rate = deaths / 100000,
ID = administrative_area_level_1
)
View(covid19_dat)
View(covid19_dat)
covid19_dat %>% filter(ID == "China")
covid19_dat <- covid19()
View(covid19_dat)
unique(covid19_dat$administrative_area_level_1)
install.packages("covid19.analytics")
library(covid19.analytics)
COVIDTEST <- covid19.data()
View(COVIDTEST)
COVIDTEST <- totals.plt()
COVIDTEST <- covid19.data()
covid19_dat <- covid19.data()
View(covid19_dat)
unique(covid19_dat$Country_Region)
library(janitor)
covid19_dat <- covid19.data() %>%
clean_names()
View(covid19_dat)
## Global COVID19 Data
covid19_country_dat <- covid19.data() %>%
clean_names() %>%
group_by(country_region) %>%
summarise(
total_confirmed = sum(confirmed, na.rm = TRUE)
)
View(covid19_country_dat)
View(covid19_country_dat)
View(covid19_dat)
## Global COVID19 Data
covid19_country_dat <- covid19.data() %>%
clean_names() %>%
group_by(country_region) %>%
summarise(
total_confirmed = sum(confirmed, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
total_recovered = sum(recovered, na.rm = TRUE)
)
View(covid19_country_dat)
View(covid19_dat)
